openapi: 3.0.1
info:
  title: Marketplace
  description: >
    * The Marketplace Services API is used to execute  the payment process from
    order until the payout.

    * It offers the ability to register orders, transactions and then apply
    order-splits, transfers and payouts.

    * Once the order is registered, the marketplace associates the transactions
    with the order. Then, the marketplace allocates funds to each seller and
    charges fees through the order-splits endpoint.

    * Finally, the marketplace can make payments to the seller's external
    account or to its own external account. 

    * The endpoint /transfers provides the ability for the Marketplace to move
    funds  between the seller account and the Marketplace account or vice
    versa.license: Socgen
  termsOfService: 'http://www.societegenerale.com'
  contact:
    name: SG ECommerce Support Team
    url: ''
    email: sg-ecommerce-support.world@socgen.com
  license:
    url: 'http://www.societegenerale.com'
  version: 1.0.18
  x-irt-code: A8821
  x-trigram-code: BAX
  x-api-audience: PUBLIC
  x-sg-name: marketplace
servers:
  - url: 'https://api.scalexpert.hml.societegenerale.com/baas/uat/marketplace/api/v1'
tags:
  - name: Sellers Onboarding
  - name: Contacts
  - name: Documents
  - name: Orders
  - name: Transactions
  - name: OrderSplits
  - name: Transfers
  - name: PayoutMerchants
  - name: PayoutSellers
  - name: PayoutSellerAmounts
  - name: Accounts
paths:
  '/sellers/{merchantSellerId}':
    get:
      tags:
        - Sellers
      summary: >-
        Retrieve a specific seller of the given marketpalce using  the unique
        identifier "merchantSellerId".
      description: >
        Use the unique identifier "merchantSellerId" (unique identifier of the
        seller on the marketplace), as a search criteria to find a specific
        seller.

        The response represents the seller data, the list of documents owned by
        the seller, the list of its related contacts and the evaluation result
        (completness and KYC assessment) of the data and documents.

        It is possible to get the seller at any step of the onboarding process.
      operationId: getSellersBymerchantSellerId
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: >-
            The seller's data and associated sub-resources that are registered
            during the onboarding process
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/sellers/{merchantSellerId}'
    put:
      tags:
        - Sellers Onboarding
      summary: Create or replace a Seller.
      description: >-
        Create a new seller if it does not exist otherwise replace it.

        The seller is identified by the seller's identifier as defined by the
        marketplace.
      operationId: createOrReplaceSeller
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Request for creation or replacement of the seller.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSellerRequest'
        required: true
      responses:
        '200':
          description: Seller is successfully registered or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSellerResponse'
              examples:
                DataStatus COMPLETE:
                  summary: DataStatus COMPLETE
                  description: DataStatus COMPLETE
                  value:
                    dataStatus: COMPLETE
                    missingData: []
                Response when address.countryCode=FR:
                  summary: Response when address.countryCode=FR
                  description: Response when address.countryCode=FR
                  value:
                    dataStatus: INCOMPLETE
                    missingData:
                      - email
                      - phoneNumber
                      - legalFormAcronym
                      - legalEntityCapitalizationAmount
                      - legalEntityCapitalizationCurrency
                      - businessActivity
                      - businessActivity.typeCode
                      - businessActivity.code
                      - externalRegistrations
                      - externalRegistrations.SIRET.code
                      - externalRegistrations.SIRET.value
                      - externalRegistrations.SIRET.date
                      - externalRegistrations.VAT.code
                      - externalRegistrations.VAT.value.
                      - legalNumberOfEmployeeRange
                      - legalNetIncomeRange
                      - legalAnnualTurnover
                      - bankingInformation
                      - bankingInformation.accountName
                      - bankingInformation.iban
                      - bankingInformation.bic
                      - bankingInformation.currency
                Response when address.countryCode=DE:
                  summary: Response when address.countryCode=DE
                  description: Response when address.countryCode=DE
                  value:
                    dataStatus: INCOMPLETE
                    missingData:
                      - legalEntityName
                      - email
                      - phoneNumber
                      - legalFormAcronym
                      - legalEntityCapitalizationAmount
                      - legalEntityCapitalizationCurrency
                      - businessActivity
                      - businessActivity.typeCode
                      - businessActivity.code
                      - externalRegistrations
                      - externalRegistrations.REGISTRATION_NUM.code
                      - externalRegistrations.REGISTRATION_NUM.value
                      - externalRegistrations.REGISTRATION_NUM.date
                      - externalRegistrations.VAT.code
                      - externalRegistrations.VAT.value
                      - externalRegistrations.TIN.code
                      - externalRegistrations.TIN.value
                      - legalNumberOfEmployeeRange
                      - legalNetIncomeRange
                      - legalAnnualTurnover
                      - bankingInformation
                      - bankingInformation.accountName
                      - bankingInformation.iban
                      - bankingInformation.bic
                      - bankingInformation.currency
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PUT
                    requestURI: '/sellers/{merchantSellerId}'
  /transfers:
    get:
      tags:
        - Transfers
      summary: Retrieve all Transfers
      description: >-
        Retrieve the list of transfers created by a specific merchant
        (marketplace).
      operationId: retrieveTransfers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transfers
    post:
      tags:
        - Transfers
      summary: Perform a transfer
      description: >-
        Make a transfer for a seller account or a marketplace account for
        purposes such as the payment of a subscription, of a fee or for
        commercial gesture. The transfers are always initiated by the merchant
        (marketplace), wether they are in its favor or in the seller's
        favor.There can never be a transfer between two sellers.
      operationId: createTransfer
      requestBody:
        description: transfer request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '201':
          description: The transfer has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/transfers
  /transactions:
    get:
      tags:
        - Transactions
      summary: Retrieve all transactions
      description: Retrieve the list of transactions for a specific merchant (marketplace).
      operationId: getTransactions
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: List of Transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transactions
    post:
      tags:
        - Transactions
      summary: Register a transaction
      description: Create a new instance of transaction related to the order.
      operationId: generateTransactions
      requestBody:
        description: transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        '201':
          description: The transaction has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/transactions
  '/sellers/{sellerId}/payout-sellers':
    get:
      tags:
        - PayoutSellers
      summary: Retrieve all payoutSeller
      description: Retrieve the list of payoutSeller for a specific seller.
      operationId: retrievePayoutSellers
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
    post:
      tags:
        - PayoutSellers
      summary: Perform a payoutSeller
      description: >-
        A payoutSeller is used to transfer funds to the external bank account of
        the Seller.
      operationId: createPayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
      requestBody:
        description: payoutSeller request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutSellerRequest'
        required: true
      responses:
        '201':
          description: The payoutSeller has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
  '/sellers/{sellerId}/payout-seller-amounts':
    get:
      tags:
        - PayoutSellerAmounts
      summary: Retrieve all instances of payoutSellerAmount
      description: Retrieve the list of payoutSellerAmount for a specific Seller.
      operationId: retrievePayoutSellerAmounts
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
    post:
      tags:
        - PayoutSellerAmounts
      summary: Create a payoutSellerAmount
      description: >-
        A payoutSeller is used to transfer funds to the external bank account of
        the Seller from an amount.
      operationId: createPayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
      requestBody:
        description: payoutSellerAmount request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutSellerAmountRequest'
        required: true
      responses:
        '201':
          description: The payoutSellerAmount has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
  '/sellers/{merchantSellerId}/documents':
    post:
      tags:
        - Documents
      summary: Register a new document for the given seller.
      description: >
        - Register a new  document for the given seller.

        - Register a new document consisting of metadata and a file content that
        must be encoded in base64.

        - The document type "COMPANY_REGISTRATION" is required to achieve the
        status  COMPLETE about the completness of the document list of a seller,
        the other document types are optional.
      operationId: createDocument
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data used to create a new document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
        required: true
      responses:
        '201':
          description: Document is successfully created
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/sellers/{merchantSellerId}/documents'
  '/sellers/{merchantSellerId}/contacts':
    post:
      tags:
        - Contacts
      summary: Create a new contact for the given seller.
      description: Create a new contact for the given seller.
      operationId: createTaskContact
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Data used to create a new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
        required: true
      responses:
        '201':
          description: Contact is successfully created.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/sellers/{merchantSellerId}/contacts'
  '/sellers/{merchantSellerId}/contacts/{contactId}/documents':
    post:
      tags:
        - Documents
      summary: Register a new document for the given contact.
      description: >
        - Register a new document for the given contact.

        - Register a new document consisting of metadata and a file content that
        must be encoded in base64.

        - At least one document of type "PASSPORT" or "IDENTITY_CARD" is
        required to reach status COMPLETE regarding the completeness of a
        contact's document list, other document types are optional
      operationId: createContactDocument
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Data used to create a new document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
        required: true
      responses:
        '201':
          description: Document is successfully created
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/sellers/{merchantSellerId}/contacts/{contactId}/documents'
  '/sellers/{merchantSellerId}/_assess-kyc':
    post:
      tags:
        - Sellers Onboarding
      summary: >-
        Request a KYC assessment after completing the seller's data, contacts,
        and related documents.
      description: This request succeed only when sellers and contacts status are COMPLETE.
      operationId: assessKyc
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted. You will receive the result through webhook.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/sellers/{merchantSellerId}/_assess-kyc'
  /payout-merchants:
    get:
      tags:
        - PayoutMerchants
      summary: Retrieve all payoutMerchants
      description: >-
        Retrieve the list of payoutMerchant for a specific merchant
        (marketplace).
      operationId: retrievePayoutMerchants
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
    post:
      tags:
        - PayoutMerchants
      summary: Perform a payoutMerchant
      description: >-
        A payoutMerchant is used to transfer funds to the external bank account
        of the merchant (marketplace)
      operationId: createPayoutMerchant
      requestBody:
        description: payoutMerchant request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutMerchantRequest'
        required: true
      responses:
        '201':
          description: The payoutMerchant has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/payout-merchants
  /orders:
    get:
      tags:
        - Orders
      summary: Retrieve all orders
      description: >-
        Retrieve the list of orders including products and transactions
        information for a specific merchant (marketplace).
      operationId: retrieveOrders
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: lastUpdateDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Date of the last update on the order. Using the ISO format in UTC
              YYYY-MM-DD (new transaction, new payout, other....)
            example: '2023-02-13T00:00:00.000Z'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/orders
    post:
      tags:
        - Orders
      summary: Order demand from the merchant
      description: Create a new instance of order by merchantGlobalOrderId.
      operationId: demandOrders
      requestBody:
        description: Order request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Order has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPostResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/order-splits
  /order-splits:
    post:
      tags:
        - OrderSplits
      summary: Apply an order-split by sellers
      description: Split an order to allocate amounts to different sellers
      operationId: OrderSplits
      requestBody:
        description: Split order request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSplitRequest'
        required: true
      responses:
        '200':
          description: OK Split has been applied
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/order-splits
  '/transactions/{transactionId}':
    get:
      tags:
        - Transactions
      summary: Retrieve a specific transaction
      description: Retrieve a transaction by transactionId (technical identifier)
      operationId: getTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the transaction
      responses:
        '200':
          description: List of Transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transactions
    delete:
      tags:
        - Transactions
      summary: Delete a specific transaction
      description: Delete a transaction by transactionId (technical identifier)
      operationId: deleteTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the transaction
      responses:
        '204':
          description: The transaction has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transactions
    patch:
      tags:
        - Transactions
      summary: Update a specific transaction
      description: >-
        Update the dueDate of a transaction by transactionId (technical
        identifier)
      operationId: updateTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPatchRequest'
        required: true
      responses:
        '200':
          description: The transaction has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PATCH
                    requestURI: /v1/transactions
  '/sellers/{merchantSellerId}/contacts/{contactId}':
    delete:
      tags:
        - Contacts
      summary: Delete a contact and its related documents.
      description: >
        Delete a contact and its related documents.

        It is not possible to delete a contact when the status is in
        "PENDING_VALIDATION" or "VALIDATED"
      operationId: deleteContact
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The specific contact is deleted.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: '/sellers/{merchantSellerId}/contacts/{contactId}'
    patch:
      tags:
        - Contacts
      summary: Update a part or an entire resource of a contact
      description: >
        Update a part or the entire resource of a contact.

        The three fields: firstName, lastName, email could not be updated with a
        null value.

        This endpoint could be used to fill in a contact's missing data to get a
        dataStatus equal to COMPLETE.
      operationId: updateContact
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Request for updating the contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactRequest'
        required: true
      responses:
        '200':
          description: Contact is successfully updated.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PATCH
                    requestURI: '/sellers/{merchantSellerId}/contacts/{contactId}'
  '/orders/{orderId}':
    delete:
      tags:
        - Orders
      summary: Delete a specific order
      description: Delete an order by orderId (technical identifier)
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the order
      responses:
        '204':
          description: The order has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/orders
    patch:
      tags:
        - Orders
      summary: Update a specific order
      description: Update the amount of an order by orderId (technical identifier)
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPatchRequest'
        required: true
      responses:
        '200':
          description: The order has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PATCH
                    requestURI: /v1/orders
  '/transfers/{transferId}':
    get:
      tags:
        - Transfers
      summary: Retrieve a specific transfers
      description: Retrieve a transfer by transferId (technical identifier)
      operationId: retrieveTransfer
      parameters:
        - name: transferId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the transfer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transfers
    delete:
      tags:
        - Transfers
      summary: Delete a specific transfer
      description: >-
        Delete a transfer by transferId (technical identifier). Only transfer
        with PENDING status can be deleted
      operationId: deleteTransfer
      parameters:
        - name: transferId
          in: path
          required: true
          schema:
            type: string
            description: Unique technical identifier of the transfer
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transfers
  '/sellers/{sellerId}/payout-sellers/{payoutSellerId}':
    get:
      tags:
        - PayoutSellers
      summary: Retrieve a specific payoutSeller
      description: Retrieve specific payoutSeller by payoutSellerId (technical identifier)
      operationId: retrievePayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: payoutSellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the payoutSeller
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
    delete:
      tags:
        - PayoutSellers
      summary: Delete a payoutSeller
      description: >-
        To delete a payoutSeller, Only payoutSeller with PENDING status can be
        deleted
      operationId: deletePayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: payoutSellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the payoutSeller
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
  '/sellers/{sellerId}/payout-seller-amounts/{payoutSellerAmountId}':
    get:
      tags:
        - PayoutSellerAmounts
      summary: Retrieve a specific payoutSellerAmount
      description: >-
        Retrieve specific payoutSellerAmount by payoutSellerAmountId (technical
        identifier)
      operationId: retrievePayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: payoutSellerAmountId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of payoutSellerAmount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
    delete:
      tags:
        - PayoutSellerAmounts
      summary: >-
        Delete the specified instance of payoutSellerAmount by
        payoutSellerAmountId
      description: >-
        To delete a payoutSellerAmount, Only payoutSellerAmount with PENDING
        status can be deleted
      operationId: deletePayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: payoutSellerAmountId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of payoutSellerAmount
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
  '/sellers/{sellerId}/accounts':
    get:
      tags:
        - Accounts
      summary: Retrieve the seller accounts
      description: Retrieve the accounts for a specific seller.
      operationId: retrieveAccountsBySellerId
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the seller
        - name: balanceExtractionDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Balances extraction date of the account values. Default value is
              the current date
            format: date
        - name: embeddedLines
          in: query
          required: false
          schema:
            type: boolean
            description: when Lines are needed in the answer. Default value FALSE.
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/accounts
  '/payout-merchants/{payoutMerchantId}':
    get:
      tags:
        - PayoutMerchants
      summary: Retrieve a specific payoutMerchant
      description: >-
        Retrieve specific payoutMerchant by payoutMerchantId (technical
        identifier)
      operationId: retrievePayoutMerchant
      parameters:
        - name: payoutMerchantId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the payoutMerchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
    delete:
      tags:
        - PayoutMerchants
      summary: Delete a specific payoutMerchant
      description: >-
        To delete a payoutMerchant, Only payoutMerchant with PENDING status can
        be deleted
      operationId: deletePayoutMerchant
      parameters:
        - name: payoutMerchantId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of the payoutMerchant
      responses:
        '204':
          description: The payoutMerchant has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
      security:
        - oauth-2-legged:
            - 'marketplace:rw'
  /accounts:
    get:
      tags:
        - Accounts
      summary: Retrieve all accounts
      description: Retrieve the list of accounts for a specific merchant.
      operationId: retrieveAccounts
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: balanceExtractionDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Balances extraction date of the account values. Default value is
              the current date
            format: date
        - name: accountType
          in: query
          required: false
          schema:
            type: string
            description: type of the account to consider.
            enum:
              - ' SETTLEMENT, CANTONMENT, MAIN'
        - name: embeddedLines
          in: query
          required: false
          schema:
            type: boolean
            description: when Lines are needed in the answer. Default value FALSE.
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/accounts
  '/sellers/{merchantSellerId}/documents/{documentId}':
    delete:
      tags:
        - Documents
      summary: Delete the seller's document by specifying its unique ID.
      description: >
        Delete the seller's document by specifying its unique ID.

        It is not possible to delete the seller's document when its status
        (documentListStatus and dataStatus) are in "PENDING_VALIDATION" or
        "VALIDATED".
      operationId: deleteDocument
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            description: Document unique identifier
            format: uuid
      responses:
        '204':
          description: The specific document is successfully deleted.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: '/sellers/{merchantSellerId}/documents/{documentId}'
  '/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}':
    delete:
      tags:
        - Documents
      summary: Delete the contact's document by specifying its unique ID.
      description: >
        Delete the contact's document by specifying its unique ID.

        It is not possible to delete the contact's document when its status
        (documentListStatus and dataStatus) are in "PENDING_VALIDATION" or
        "VALIDATED".
      operationId: deleteContactDocument
      parameters:
        - name: merchantSellerId
          in: path
          required: true
          schema:
            type: string
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: documentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: The specific contact is deleted.
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: >-
                      /sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
components:
  schemas:
    Address:
      required:
        - cityName
        - countryCode
        - streetName
        - streetNumber
        - zipCode
      type: object
      properties:
        streetNumber:
          maxLength: 5
          minLength: 0
          type: string
          description: Number assigned to the building in the street
          example: '4'
        streetName:
          maxLength: 40
          minLength: 0
          type: string
          description: Name of the street
          example: Roger Salengro
        zipCode:
          maxLength: 5
          minLength: 0
          type: string
          description: Zip code of the address
          example: '59000'
        cityName:
          maxLength: 28
          minLength: 0
          type: string
          description: Name of the city
          example: LILLE
        countryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Code of the country ISO 3166-1 alpha-2, must match this pattern
            '[A-Z][A-Z]'
          example: FR
      description: Main address of the seller's office
    BankingInformation:
      type: object
      properties:
        accountName:
          maxLength: 50
          minLength: 0
          type: string
          description: account name
          example: Société Générale compte principal
        iban:
          maxLength: 34
          minLength: 0
          type: string
          description: >
            - The International Bank Account Number is a code used
            internationally by financial institutions to uniquely identify the
            account of a customer at a financial institution.

            - It MUST match the ISO 13616 format:
            [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
          example: FR1420041010050500013M02606
        bic:
          maxLength: 11
          minLength: 0
          type: string
          description: BIC
          example: SOGEFRPPXX
        currency:
          type: string
          description: >-
            3 letter currency code as defined by ISO-4217. It must match this
            pattern [A-Z][A-Z][A-Z]
          format: iso-4217
          example: EUR
      description: Banking information of the seller.
    BusinessActivity:
      required:
        - code
        - typeCode
      type: object
      properties:
        typeCode:
          type: string
          description: |-
            Type code of the business activity referential/standard/norms:

            NACE: European classification of activities.
            NAF: French Nomenclature of activities.
          example: NAF
          enum:
            - NACE
            - NAF
        code:
          type: string
          description: >-
            Activity code belonging to the business referential.


            If typeCode=NACE then the code must match this pattern
            ^[0-9][0-9]\.[0-9][0-9]$

            If typeCode=NAF then the code must match this pattern
            ^[0-9][0-9]\.[0-9][0-9][A-Z]$
          example: 01.11Z
    ExternalRegistration:
      required:
        - code
        - value
      type: object
      properties:
        code:
          type: string
          description: >-
            An external registration code that uniquely identifies a company:


            VAT: Business VAT number.

            TIN: Taxpayer Identification Number.

            SIRET: Registration number if the registrationConuntry is FR.

            REGISTRATION_NUM: registration number if registrationCountry is
            other than the FR.
          example: SIRET
          enum:
            - SIRET
            - VAT
            - TIN
            - REGISTRATION_NUM
        value:
          maxLength: 20
          minLength: 0
          type: string
          description: An external registration value associated to the code
          example: '362521879'
        date:
          type: string
          description: >-
            Registration date that must match this pattern YYYY-MM-DD. This
            field is only required when the code is SIRET or REGISTRATION_NUM.
          format: date
          example: '2017-07-21T00:00:00.000Z'
      description: >
        - The list of externalRegistration codes to be provided is: VAT, SIRET,
        REGISTRATION_NUM, TIN - The requirement of these codes is defined as
        follows:
          - The code VAT is always required.
          - The code "TIN"is required when the address.countryCode is not FR. It is required to specify the taxPayer Identification number of the provided taxResidenceCountry.
          - The code SIRET is required when the address.countryCode is FR.
          - The code REGISTRATION_NUM is required when the address.countryCode is other than the FR.
    TaskSellerRequest:
      required:
        - address
        - legalEntityName
      type: object
      properties:
        legalEntityName:
          maxLength: 40
          minLength: 0
          type: string
          description: Legal entity name of the seller.
          example: Amazon France
        address:
          $ref: '#/components/schemas/Address'
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\-])*(?:[a-z0-9])\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\+[1-9]\d{1,14}$
          example: 33666512877
        legalFormAcronym:
          type: string
          description: The company form of the seller.
          example: SARL
          enum:
            - SARL
            - SA
            - SNC
            - SCA
            - GIE
            - SCS
            - EURL
            - SCP
            - SC
            - ASSOCIATION
            - SOCIETE_DE_DROIT_ETRANGER
            - SAS
            - EARL
        legalEntityCapitalizationAmount:
          type: number
          description: Legal entity capitalization amount in a main unit of the currency.
          format: float
          example: 1000
        legalEntityCapitalizationCurrency:
          type: string
          description: >-
            3 letter currency code as defined by ISO-4217. It must match this
            pattern [A-Z][A-Z][A-Z]
          format: iso-4217
          example: EUR
        businessActivity:
          $ref: '#/components/schemas/BusinessActivity'
        externalRegistrations:
          type: array
          description: External registration list about the seller
          items:
            $ref: '#/components/schemas/ExternalRegistration'
        legalNumberOfEmployeeRange:
          type: string
          description: Business number of employees range
          example: BETWEEN_1_AND_9
          enum:
            - ZERO
            - BETWEEN_1_AND_9
            - BETWEEN_10_AND_99
            - BETWEEN_100_AND_249
            - MORE_THAN_250
        legalNetIncomeRange:
          type: string
          description: Business net income range (in k€)
          example: BETWEEN_0_AND_4
          enum:
            - BETWEEN_0_AND_4
            - BETWEEN_5_AND_9
            - BETWEEN_10_AND_49
            - BETWEEN_50_AND_149
            - BETWEEN_150_AND_499
            - MORE_THAN_500
        legalAnnualTurnover:
          type: string
          description: Business annual turnover (in k€)
          example: BETWEEN_100_AND_249
          enum:
            - BETWEEN_0_AND_39
            - BETWEEN_40_AND_99
            - BETWEEN_100_AND_249
            - BETWEEN_250_AND_999
            - BETWEEN_1000_AND_2999
            - BETWEEN_3000_AND_9999
            - BETWEEN_10000_AND_99999
            - MORE_THAN_100000
        bankingInformation:
          $ref: '#/components/schemas/BankingInformation'
      description: Request for creation or replacement of the seller.
    PutSellerResponse:
      required:
        - dataStatus
        - missingData
      type: object
      properties:
        dataStatus:
          type: string
          description: |
            Status about The completeness of the data of the given seller
            - INCOMPLETE If any required data is missing
            - COMPLETE : ALL required data are available.
          example: INCOMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
        missingData:
          minItems: 0
          type: array
          description: >-
            List of missing data that are required to achieve
            dataStatus=COMPLETE
          example:
            - email
            - phoneNumber
            - legalFormAcronym
            - legalEntityCapitalizationAmount
            - legalEntityCapitalizationCurrency
            - businessActivity
            - businessActivity.typeCode
            - businessActivity.code
            - externalRegistrations
            - externalRegistrations.SIRET.code
            - externalRegistrations.SIRET.value.
            - externalRegistrations.SIRET.date
            - externalRegistrations.VAT.code
            - externalRegistrations.VAT.value.
            - legalNumberOfEmployeeRange
            - legalNetIncomeRange
            - legalAnnualTurnover
            - bankingInformation
            - bankingInformation.accountName
            - bankingInformation.iban
            - bankingInformation.bic
            - bankingInformation.currency
          items:
            type: string
    BaasExceptionHttpResponse:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error
          format: date-time
          example: '2023-01-29T10:05:38.429Z'
        httpStatusCode:
          type: integer
          description: 'HTTP status code (404, 400, 500...)'
          format: int32
          example: 400
        httpStatusMessage:
          type: string
          description: >-
            HTTP status message ("Not Found", "Bad Request", "Internal Server
            Error"...)
          example: Bad Request
        errorCode:
          type: string
          description: >-
            The applicative error code. It is a machine readable code. Used when
            BAD_REQUEST error to provide details about the error.
          example: INVALID_EMAIL
        errorMessage:
          type: string
          description: >-
            The applicative error message. It is a human readable English
            message.
          example: The email address is not valid !
        errors:
          type: array
          description: 'List of { error code, error message }.'
          items:
            $ref: '#/components/schemas/ErrorCodeAndMessage'
        requestMethod:
          type: string
          description: >-
            HTTP method used to make the request ("GET", "POST", "PUT",
            "DELETE"...)
          example: POST
        requestURI:
          type: string
          description: HTTP URI used to make the request
          example: /v1/user-account/users
      description: Generic HTTP Error Response
    ErrorCodeAndMessage:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      description: 'List of { error code, error message }.'
    TransferRequest:
      required:
        - accountingEntry
        - amount
        - currencyCode
        - merchantTransferId
        - reasonCode
        - reasonLabel
        - sellerId
        - solutionCode
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        accountingEntry:
          type: string
          description: >-
            Identify the transfer way. TRANSFER_TO_MARKETPLACE is a payment from
            the seller to the marketplace. TRANSFER_TO_SELLER is the opposite
          example: TRANSFER_TO_MARKETPLACE
          enum:
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
        reasonCode:
          type: string
          description: >-
            Attach the transfer to a specific accounting category for reporting
            use
          example: SUBSCRIPTION
          enum:
            - SUBSCRIPTION
            - COMMERCIAL_GESTURE
            - OTHER
        reasonLabel:
          maxLength: 140
          minLength: 0
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Transfer execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default.
          format: date
        amount:
          type: number
          description: Transfer Amount.
          format: float
          example: 65.15
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: '9887975454'
    TransferResponse:
      type: object
      properties:
        transferId:
          type: integer
          description: Unique technical identifier of the transfer
          format: int32
          example: 123456789
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: '9887975454'
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        accountingEntry:
          type: string
          description: >-
            Identify the transfer way. TRANSFER_TO_MARKETPLACE is a payment from
            the seller to the marketplace. TRANSFER_TO_SELLER is the opposite
          example: TRANSFER_TO_MARKETPLACE
          enum:
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
        reasonCode:
          type: string
          description: >-
            Attach the transfer to a specific accounting category for reporting
            use
          example: SUBSCRIPTION
          enum:
            - SUBSCRIPTION
            - COMMERCIAL_GESTURE
            - OTHER
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Transfer execution date. Using the ISO format
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date
        amount:
          type: number
          description: Transfer amount
          format: float
          example: 65.15
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        status:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
      description: List of transfers
    TransactionRequest:
      required:
        - amount
        - currencyCode
        - executionDate
        - merchantGlobalOrderId
        - merchantTransactionId
        - paymentMethodName
        - solutionCode
        - type
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          format: date
          example: '2017-07-21T00:00:00.000Z'
    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: integer
          description: Unique technical transaction identifier
          format: int32
          example: 321
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        orderId:
          type: integer
          description: Unique technical identifier of the order
          format: int32
          example: 123456789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount.
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
            - UNKNOWN
        isPaid:
          type: boolean
          description: To know if the transaction's payment is received or not
          example: true
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          format: date
          example: '2017-07-21T00:00:00.000Z'
        paidAmount:
          type: number
          description: >-
            amount already received for this transaction (value between 0 and
            amount)
          format: float
          example: 65
    PayoutSellerOrderRequest:
      required:
        - merchantGlobalOrderId
      type: object
      properties:
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        payoutRequestedAmount:
          type: number
          description: Payout request amount
          format: float
          example: 65
      description: >-
        Order related to the seller. if not specified the default value will be
        the total of all pending orders amount
    PayoutSellerRequest:
      required:
        - currencyCode
        - merchantPayoutSellerId
        - reasonLabel
        - solutionCode
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          maxLength: 140
          minLength: 0
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: >-
            Tnsfer related to the seller. if not specified the default value
            will be the total pending transfers amount
          items:
            $ref: '#/components/schemas/PayoutSellerTransferRequest'
        payoutOrders:
          type: array
          description: >-
            Order related to the seller. if not specified the default value will
            be the total of all pending orders amount
          items:
            $ref: '#/components/schemas/PayoutSellerOrderRequest'
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
    PayoutSellerTransferRequest:
      required:
        - merchantTransferId
      type: object
      properties:
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: 1234-azerty-56789
      description: >-
        Tnsfer related to the seller. if not specified the default value will be
        the total pending transfers amount
    PayoutPayment:
      type: object
      properties:
        paymentStatus:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
        paymentAmount:
          type: number
          description: Payment amount.
          format: float
          example: 85
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Payment related to the payoutSeller
    PayoutSellerOrderResponse:
      type: object
      properties:
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        payoutRequestedAmount:
          type: number
          description: Payout Request amount.
          format: float
          example: 65
        payoutEffectiveAmount:
          type: number
          description: Payout amount.
          format: float
          example: 20
        payoutResidualAmount:
          type: number
          description: Payout available amount.
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Order to pay during the payoutSeller
    PayoutSellerResponse:
      type: object
      properties:
        payoutSellerId:
          type: integer
          description: Unique technical ID of the payoutSeller
          format: int32
          example: 4
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: Transfer to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerTransferResponse'
        payoutOrders:
          type: array
          description: Order to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerOrderResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
    PayoutSellerTransferResponse:
      type: object
      properties:
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: 1234-azerty-56789
        payoutAmount:
          type: number
          description: Payout amount.
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Transfer to pay during the payoutSeller
    PayoutRequest:
      required:
        - askedAmount
        - currencyCode
      type: object
      properties:
        askedAmount:
          type: number
          description: Amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Payout amount. Dafault value will be the available amount
    PayoutSellerAmountRequest:
      required:
        - merchantPayoutSellerAmountId
        - reasonLabel
        - solutionCode
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          maxLength: 140
          minLength: 0
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        payout:
          $ref: '#/components/schemas/PayoutRequest'
        merchantPayoutSellerAmountId:
          type: string
          description: >-
            External reference Id of the payoutSellerAmount on the merchant
            side.
          example: 1234-azerty-56789
    PayoutResponse:
      type: object
      properties:
        askedAmount:
          type: number
          description: asked amount for the payout
          format: float
          example: 65
        payoutAmount:
          type: number
          description: amount paid for the payout
          format: float
          example: 20
        payoutAvailableAmount:
          type: number
          description: amount available for payout after the payout execution
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Amounts belonging to the payoutSellerAmounts
    PayoutSellerAmountResponse:
      type: object
      properties:
        payoutSellerAmountId:
          type: integer
          description: Unique technical identifier of payoutSellerAmount
          format: int32
          example: 4
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        payout:
          $ref: '#/components/schemas/PayoutResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
        merchantPayoutSellerAmountId:
          type: string
          description: >-
            External reference Id of the payoutSellerAmount on the merchant
            side.
          example: 1234-azerty-56789
    CreateDocumentRequest:
      required:
        - fileContent
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 90
          minLength: 0
          type: string
          description: >-
            Original name of the uploaded file. The fileName must end with an
            extension that represents its media format. The extensions must
            match the following case-insensitive values pdf, jpeg, jpg, png,
            tiff.
          example: id_recto_verso_company_registration.pdf
        fileContent:
          type: string
          description: >-
            Content of the file object, base64 encoded characters. The max size
            of the file must not exceed 4 MO.
          format: byte
        type:
          type: string
          description: Type of the document.
          example: COMPANY_REGISTRATION
          enum:
            - POLICE_RECORD
            - COMPANY_REGISTRATION
            - TURNOVER
            - BANK_IDENTITY_STATEMENT
            - RESIDENCE_PERMIT
            - PROXY_GRANTING_AN_EMPLOYEE
            - COMPANY_REGISTRATION_OFFICIAL_PAPER
            - OFFICIAL_TAX_CERTIFICATE
            - EMPLOYEE_PAYMENT_NOTICE
            - USER_BANK_STATEMENT
            - BUSINESS_LEGAL_STATUS
            - TAX_STATEMENT
            - EXEMPTION_STATEMENT
            - LIVENESS_RESULT
            - SIREN
            - RBE_LIST_OF_BENEFICIAL_OWNERS
            - PEP_ASSETS_DECLARATION
            - PROFESSIONAL_REVENUE_DECLARATION
            - NON_PROFIT_ORGANISATION_FINANCIAL_DECLARATION
      description: Document request data
    ContactAddress:
      type: object
      properties:
        streetNumber:
          maxLength: 5
          minLength: 0
          type: string
          description: Number assigned to the building in the street
          example: '4'
        streetName:
          maxLength: 40
          minLength: 0
          type: string
          description: Name of the street
          example: Roger Salengro
        zipCode:
          maxLength: 5
          minLength: 0
          type: string
          description: Zip code of the address
          example: '59000'
        cityName:
          maxLength: 28
          minLength: 0
          type: string
          description: Name of the city
          example: LILLE
        countryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Code of the country ISO 3166-1 alpha-2, must match this pattern
            '[A-Z][A-Z]'
          example: FR
      description: Work address of the contact
    CreateContactInvolvementsRequest:
      type: object
      properties:
        type:
          type: string
          description: >-
            Involvement type of the contact inside the related organization
            (Seller). - SHAREHOLDER for effective beneficiary and
            LEGAL_REPRESENTATIVE for legal representative. - If the contact is
            both SHAREHOLDER and LEGAL_REPRESENTATIVE then put
            LEGAL_REPRESENTATIVE
          example: SHAREHOLDER
          enum:
            - SHAREHOLDER
            - LEGAL_REPRESENTATIVE
        startDateTime:
          type: string
          description: >-
            Start of the time period, using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. If startDateTime is not specified, the
            default value will be the dateTime of the entity registration.
          format: date-time
          example: '2024-01-12T23:20:50.000Z'
      description: Contact involvement in the seller's organization.
    CreateContactRequest:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            Contact's first name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: John
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            Contact's last name. Contact's first name. It must match the
            following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: Snow
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\-])*(?:[a-z0-9])\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\+[1-9]\d{1,14}$
          example: 33666512877
        involvement:
          $ref: '#/components/schemas/CreateContactInvolvementsRequest'
        occupationType:
          type: string
          description: Type of occupation of the contact
          example: PRIVATE_SECTOR_EMPLOYEES
          enum:
            - SELF_EMPLOYED
            - PUBLIC_SECTOR_EMPLOYEES
            - PRIVATE_SECTOR_EMPLOYEES
            - RETIRED_PEOPLE_AND_STUDENTS
            - WITHOUT_ANY_PROFESSIONAL_ACTIVITY
        personalAssets:
          type: string
          description: User's personal assets range exprimed in K€
          example: BETWEEN_3_AND_22
          enum:
            - BETWEEN_0_AND_2
            - BETWEEN_3_AND_22
            - BETWEEN_23_AND_128
            - BETWEEN_129_AND_319
            - BETWEEN_320_AND_464
            - MORE_THAN_465
        address:
          $ref: '#/components/schemas/ContactAddress'
        effectiveBeneficiary:
          type: number
          description: >-
            percentage of ownership, if applicable (25.00 for 25%, 100.00 for
            100%, etc.)
          format: float
          example: 25
        commonTitle:
          type: string
          description: CivilityEnum of the physical person
          example: MR
          enum:
            - MR
            - MRS
            - MS
            - MISS
        birthDate:
          type: string
          description: Date of birth in the format YYYY-MM-DD.
          format: date
          example: '2000-09-09T00:00:00.000Z'
        birthCityName:
          maxLength: 50
          minLength: 0
          type: string
          description: City of birth
          example: San Francisco
        birthCountryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        nationality:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        incomeRange:
          type: string
          description: Business net income range (in k€)
          example: BETWEEN_0_AND_18
          enum:
            - BETWEEN_0_AND_18
            - BETWEEN_19_AND_23
            - BETWEEN_24_AND_27
            - BETWEEN_28_AND_35
            - BETWEEN_36_AND_56
            - MORE_THAN_57
        taxResidenceCountryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        taxResidenceTaxPayerId:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            If taxResidenceCountryCode is not FR, specify the taxPayerId of the
            provided taxResidenceCountry
          example: 123456abc
    PayoutMerchantRequest:
      required:
        - currencyCode
        - merchantPayoutMerchantId
        - solutionCode
      type: object
      properties:
        merchantPayoutMerchantId:
          type: string
          description: External reference Id of the payoutMerchant on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          maxLength: 140
          minLength: 0
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Payout merchant amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
    PayoutMerchantResponse:
      type: object
      properties:
        payoutMerchantId:
          type: integer
          description: Unique technical identifier of the payoutMerchant
          format: int32
          example: 4
        merchantPayoutMerchantId:
          type: string
          description: External reference Id of the payoutMerchant on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Payout merchant amount
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        status:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
    Item:
      required:
        - amount
        - currencyCode
        - gtin
        - label
        - price
        - quantity
      type: object
      properties:
        gtin:
          type: string
          description: International reference
          example: '7512345678915'
        label:
          type: string
          description: description of the product
          example: Tea cup
        quantity:
          type: integer
          description: number of this products in the basket
          format: int32
          example: 4
        price:
          type: number
          description: Unit price of the item without discount.
          format: float
          example: 15.55
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        amount:
          type: number
          description: Total amount
          format: float
          example: 64
      description: Details of item purchased
    OrderRequest:
      required:
        - amount
        - currencyCode
        - merchantBuyerId
        - merchantGlobalOrderId
        - solutionCode
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        amount:
          type: number
          description: Total amount of the order
          format: float
          example: 64
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        orderType:
          type: string
          description: used to define the type of the order. Default value PURCHASE
          example: PURCHASE
          enum:
            - PURCHASE
            - CREDIT_NOTE
        merchantBuyerId:
          type: string
          description: External reference Id of the Buyer on the merchant side.
          example: 1234-azerty-56789
        items:
          type: array
          description: Items list belonging to the order
          items:
            $ref: '#/components/schemas/Item'
    OrderPostResponse:
      type: object
      properties:
        orderId:
          type: integer
          description: Unique technical order identifier
          format: int32
          example: 123456789
    OrderSplitRequest:
      required:
        - merchantGlobalOrderId
        - solutionCode
        - splits
      type: object
      properties:
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        splits:
          type: array
          description: splits related to the order
          items:
            $ref: '#/components/schemas/Seller'
    Seller:
      required:
        - amount
        - amountType
        - currencyCode
        - fee
        - feeType
        - model
        - sellerId
      type: object
      properties:
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        amount:
          type: number
          description: Split amount.
          example: 65
        amountType:
          type: string
          description: >-
            SELLER_PAYMENT is the money is to pay the seller, SELLER_REFUND if
            the money goes back to the merchant
          example: SELLER_PAYMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
        fee:
          type: number
          description: Fee amount.
          example: 65.15
        feeType:
          type: string
          description: >-
            MKTP_FEES is the fees is to pay the merchant, MKTP_FEES_BACK if the
            fees goes back to the seller (reimbursement)
          example: MKTP_FEES
          enum:
            - MKTP_FEES
            - MKTP_FEES_BACK
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          example: EUR
        model:
          type: string
          description: >-
            used to know who is responsible from the sale. * 3P is a model in
            which the third-party seller is responsible for the product and
            bears the billing. * 2P is a buy-sell-on-the-fly model where the
            marketplace is responsible for invoicing
          example: 3P
          enum:
            - 2P
            - 3P
      description: splits related to the order
    TransactionPatchRequest:
      type: object
      properties:
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          format: date
          example: '2017-07-21T00:00:00.000Z'
    UpdateContactRequest:
      type: object
      properties:
        firstName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            Contact's first name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: John
        lastName:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            Contact's last name. Contact's first name. It must match the
            following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: Snow
        email:
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\-])*(?:[a-z0-9])\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\+[1-9]\d{1,14}$
          example: 33666512877
        involvement:
          $ref: '#/components/schemas/CreateContactInvolvementsRequest'
        occupationType:
          type: string
          description: Type of occupation of the contact
          example: PRIVATE_SECTOR_EMPLOYEES
          enum:
            - SELF_EMPLOYED
            - PUBLIC_SECTOR_EMPLOYEES
            - PRIVATE_SECTOR_EMPLOYEES
            - RETIRED_PEOPLE_AND_STUDENTS
            - WITHOUT_ANY_PROFESSIONAL_ACTIVITY
        personalAssets:
          type: string
          description: User's personal assets range exprimed in K€
          example: BETWEEN_3_AND_22
          enum:
            - BETWEEN_0_AND_2
            - BETWEEN_3_AND_22
            - BETWEEN_23_AND_128
            - BETWEEN_129_AND_319
            - BETWEEN_320_AND_464
            - MORE_THAN_465
        address:
          $ref: '#/components/schemas/ContactAddress'
        effectiveBeneficiary:
          type: number
          description: >-
            percentage of ownership, if applicable (25.00 for 25%, 100.00 for
            100%, etc.)
          format: float
          example: 25
        commonTitle:
          type: string
          description: CivilityEnum of the physical person
          example: MR
          enum:
            - MR
            - MRS
            - MS
            - MISS
        birthDate:
          type: string
          description: Date of birth in the format YYYY-MM-DD.
          format: date
          example: '2000-09-09T00:00:00.000Z'
        birthCityName:
          maxLength: 50
          minLength: 0
          type: string
          description: City of birth
          example: San Francisco
        birthCountryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        nationality:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        incomeRange:
          type: string
          description: Business net income range (in k€)
          example: BETWEEN_0_AND_18
          enum:
            - BETWEEN_0_AND_18
            - BETWEEN_19_AND_23
            - BETWEEN_24_AND_27
            - BETWEEN_28_AND_35
            - BETWEEN_36_AND_56
            - MORE_THAN_57
        taxResidenceCountryCode:
          maxLength: 2
          minLength: 0
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        taxResidenceTaxPayerId:
          maxLength: 50
          minLength: 0
          type: string
          description: >-
            If taxResidenceCountryCode is not FR, specify the taxPayerId of the
            provided taxResidenceCountry
          example: 123456abc
    OrderPatchRequest:
      type: object
      properties:
        amount:
          type: number
          description: amount of the order
          format: float
          example: 64
    OrderResponse:
      type: object
      properties:
        orderId:
          type: integer
          description: Unique technical identifier of the order.
          format: int32
          example: 123456
        solutionCode:
          type: string
          description: Solution Code used for marketplace
          example: MPFRGE-TXTS
        merchantGlobalOrderId:
          type: string
          description: >-
            External refernce Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        amount:
          type: number
          description: Total amount of the order.
          format: float
          example: 65.15
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        orderType:
          type: string
          description: used to define the type of the order. Default value PURCHASE
          example: PURCHASE
          enum:
            - PURCHASE
            - CREDIT_NOTE
        merchantBuyerId:
          type: string
          description: External reference Id of the Buyer on the merchant side.
          example: 1234-azerty-56789
        registrationTimestamp:
          type: string
          description: >-
            Creation order date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        lastUpdateTimestamp:
          type: string
          description: >-
            Date of the last update on the order. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        items:
          type: array
          description: Items list belonging to the order
          items:
            $ref: '#/components/schemas/Item'
        transactions:
          type: array
          description: Transactions list belonging to the order
          items:
            $ref: '#/components/schemas/Transaction'
        orderSplits:
          type: array
          description: Splits list belonging to the order
          items:
            $ref: '#/components/schemas/OrderSplit'
        payoutSellers:
          type: array
          description: PayoutSellers list belonging to the order
          items:
            $ref: '#/components/schemas/PayoutSeller'
      description: List of orders
    OrderSplit:
      type: object
      properties:
        splits:
          type: array
          items:
            $ref: '#/components/schemas/Split'
      description: Splits list belonging to the order
    PayoutOrderResponse:
      type: object
      properties:
        payoutRequestedAmount:
          type: number
          description: Payout Request amount.
          format: float
          example: 65
        payoutEffectiveAmount:
          type: number
          description: Payout amount.
          format: float
          example: 20
        payoutResidualAmount:
          type: number
          description: Payout available amount.
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Order to pay during the payoutSeller
    PayoutSeller:
      type: object
      properties:
        payoutSellerId:
          type: integer
          description: Unique technical ID of the payoutSeller.
          format: int32
          example: 123456789
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            PayoutSellers execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: Transfer to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerTransferResponse'
        payoutOrders:
          type: array
          description: Order to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutOrderResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
      description: PayoutSellers list belonging to the order
    Split:
      type: object
      properties:
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        amount:
          type: number
          description: Amount.
          example: 65
        amountType:
          type: string
          description: >-
            SELLER_PAYMENT is the money is to pay the seller, SELLER_REFUND if
            the money goes back to the merchant
          example: SELLER_PAYMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
        fee:
          type: number
          description: Fee amount.
          example: 65
        feeType:
          type: string
          description: >-
            MKTP_FEES is the fees is to pay the merchant, MKTP_FEES_BACK if the
            fees goes back to the seller (reimbursement)
          example: MKTP_FEES
          enum:
            - MKTP_FEES
            - MKTP_FEES_BACK
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          example: EUR
        model:
          type: string
          description: >-
            used to know who is responsible from the sale. * 3P is a model in
            which the third-party seller is responsible for the product and
            bears the billing. * 2P is a buy-sell-on-the-fly model where the
            marketplace is responsible for invoicing
          example: 3P
          enum:
            - 2P
            - 3P
        splitProducerFeeAmount:
          type: number
          description: The fee amount dedicated for the producer.
          example: 65
        isCashed:
          type: boolean
          description: to know if the line is cashed or still pending
          example: true
    Transaction:
      type: object
      properties:
        transactionId:
          type: integer
          description: Unique technical Id
          format: int32
          example: 123456789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount.
          format: float
          example: 64
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
            - UNKNOWN
        isPaid:
          type: boolean
          description: To know if the transaction's payment is received or not
          example: true
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          format: date
          example: '2017-07-21T00:00:00.000Z'
        paidAmount:
          type: number
          description: >-
            amount already received for this transaction (value between 0 and
            amount)
          format: float
          example: 65
      description: Transactions list belonging to the order
    TransfersResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        transfers:
          type: array
          description: List of transfers
          items:
            $ref: '#/components/schemas/TransferResponse'
    TransactionsResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of page
          format: int32
          example: 1
        transactions:
          type: array
          description: List of transactions
          items:
            $ref: '#/components/schemas/TransactionResponse'
    PayoutSellersResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        payoutSellers:
          type: array
          description: List of payoutSellers
          items:
            $ref: '#/components/schemas/PayoutSellerResponse'
    PayoutSellerAmountsResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        payoutSellerAmounts:
          type: array
          description: List of payoutSellerAmounts
          items:
            $ref: '#/components/schemas/PayoutSellerAmountResponse'
    Account:
      type: object
      properties:
        accountType:
          type: string
          description: the type of account
          example: SETTLEMENT
          enum:
            - SETTLEMENT
            - CANTONMENT
            - MAIN
        balanceExtractionDate:
          type: string
          description: >-
            Extraction date of the currentBalance and forecastBalance fields.
            Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        currentBalance:
          type: number
          description: >-
            account balance when the request is made (whatever the date in
            query)
          format: float
          example: 9999.99
        forecastBalance:
          type: number
          description: account forecasted balance when the request is made
          format: float
          example: 4850
        currency:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        balancesHistory:
          $ref: '#/components/schemas/BalancesHistory'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Line'
      description: >-
        accounts belonging to the Marketplace. An empty accounts list is
        returned , if no items is retrieved.
    AccountsResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        accounts:
          type: array
          description: >-
            accounts belonging to the Marketplace. An empty accounts list is
            returned , if no items is retrieved.
          items:
            $ref: '#/components/schemas/Account'
    BalancesHistory:
      type: object
      properties:
        openingBalance:
          type: number
          description: balance in the beginning of the day requested
          format: float
          example: 4500.1
        closingBalance:
          type: number
          description: >-
            balance at the end of the day requested (if the requested day is
            closed)
          format: float
          example: 6321.11
        date:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
    Line:
      type: object
      properties:
        lineId:
          type: integer
          description: Unique technical identifier.
          format: int32
          example: 123456
        accountingEntry:
          type: string
          description: type of the entry to classify into the different accounts
          example: SETTLEMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
            - MKTP_FEES
            - BMPS_FEES
            - MKTP_FEES_BACK
            - BMPS_FEES_BACK
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
            - ACQUIRING_FEE_BAILOUT
            - PAYIN_CREDIT_BAILOUT
            - PAYIN_REFUND_BAILOUT
            - ROLLING_RESERVE_ACQ_EVOL_BAILOUT
            - PAYIN_PAYMENT
            - PAYIN_REFUND
            - PAYIN_CREDIT
            - COLLECTE_SETTLEMENT
            - SETTLEMENT_CANTONMENT
            - CASHOUT_MKTP
            - CASHOUT_SELLER
            - STANDARD_DEPOSIT
            - PAYIN_UNPAID_BAILOUT
            - PAYIN_UNPAID_CHBCK
        accountingLabel:
          type: string
          description: label associated to accountingEntry for display purpose
          example: transfer or payment reason or other
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        operationDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        cashedDate:
          type: string
          description: >-
            Date of cash execution. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          format: date-time
          example: '2023-04-22T06:00:00.000Z'
        isCashed:
          type: boolean
          description: to know if the line is cashed or still pending
        lineType:
          type: string
          description: Line Type
          example: DEBIT
          enum:
            - DEBIT
            - CREDIT
        amount:
          type: number
          description: credited or debited amount.
          format: float
          example: 65
      description: All transactions lines on the account
    PayoutMerchantsResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of page
          format: int32
          example: 1
        payoutMerchants:
          type: array
          description: List of payoutMerchants
          items:
            $ref: '#/components/schemas/PayoutMerchantResponse'
    OrdersResponse:
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        orders:
          type: array
          description: List of orders
          items:
            $ref: '#/components/schemas/OrderResponse'
  securitySchemes:
    oauth-flows:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: >-
            https://api.scalexpert.hml.societegenerale.com/baas/uat/auth-server/api/v1/oauth2/token
          scopes:
            'marketplace:rw': marketplace scope
externalDocs:
  description: Dev Docs
  url: >-
    https://docs.scalexpert.societegenerale.com/apidocs/3mLlrPx3sPtekcQvEEUg/developers-docs/get-started
security:
  - oauth-flows:
      - 'marketplace:rw'
x-sg-configuration:
  gateways:
    - name: baas-open-gateway
      description: To expose Open APIs to BAAS partners
      url: 'https://api.scalexpert.hml.societegenerale.com/baas/uat'
