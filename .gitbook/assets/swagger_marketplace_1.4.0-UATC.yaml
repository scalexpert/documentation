openapi: 3.0.1
info:
  title: Marketplace
  description: >
    * The Marketplace Services API is used to execute  the payment process from
    order until the payout.


    * It offers the ability to register orders, transactions and then apply
    order-splits, transfers and payouts.

    * Once the order is registered, the marketplace associates the transactions
    with the order. Then, the marketplace allocates funds to each seller and
    charges fees through the order-splits endpoint.

    * Finally, the marketplace can make payments to the seller's external
    account or to its own external account. 

    * The endpoint /transfers provides the ability for the Marketplace to move
    funds  between the seller account and the Marketplace account or vice
    versa.license: Socgen


    **Changelog** :

      - Update enums of occupationType, personnalAssets and incomeRange of the contact resource, impaced endpoints: POST /sellers/sellerId/contacts, PATCH /sellers/sellerId/contacts and GET /sellers/merchantSellerId

      - New subResource sanctionsQuestionnaire of the resource seller, impacted endpoints: PUT and GET /sellers/sellerId

      - New field "onboardingProcessStatus" in the response of GET /sellers/sellerId
  termsOfService: 'http://www.societegenerale.com'
  contact:
    name: SG ECommerce Support Team
    url: ''
    email: sg-ecommerce-support.world@socgen.com
  license:
    url: 'http://www.societegenerale.com'
  version: 1.4.0
  x-irt-code: A8821
  x-trigram-code: BAX
  x-api-audience: PUBLIC
  x-sg-name: marketplace
servers:
  - url: >-
      https://api.scalexpert.uatc.societegenerale.com/baas/uatc/marketplace/api/v1
tags:
  - name: Sellers
  - name: Contacts
  - name: Documents
  - name: KYC assessment
  - name: Orders
  - name: Transactions
  - name: OrderSplits
  - name: Transfers
  - name: PayoutMerchants
  - name: PayoutSellers
  - name: PayoutSellerAmounts
  - name: Accounts
paths:
  '/sellers/{merchantSellerId}':
    get:
      tags:
        - Sellers
      summary: >-
        Retrieve a specific seller of the given marketplace using  the unique
        identifier "merchantSellerId".
      description: >
        - Use the unique identifier "merchantSellerId" (unique identifier of the
        seller on the marketplace), as a search criteria to find a specific
        seller.

        - The response represents the seller data, the list of documents owned
        by the seller, the list of its related contacts and the evaluation
        result (completness and KYC assessment) of the data and documents.

        - It is possible to get the seller at any step of the onboarding
        process.
      operationId: retrieveSeller
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
      responses:
        '200':
          description: >-
            The seller's data and associated sub-resources that are registered
            during the onboarding process
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GETSellerResponse'
              examples:
                GET Seller response after receiving the MP_KYC_VALIDATED event:
                  description: >-
                    GET Seller response after receiving the MP_KYC_VALIDATED
                    event
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: VALIDATED
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: VALIDATED
                        dataStatus: VALIDATED
                        documentListStatus: VALIDATED
                    dataStatus: VALIDATED
                    documentListStatus: VALIDATED
                    onboardingProcessStatus: KYC_OK
                    identityVerification:
                      type: VIRTUAL_IBAN
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRPPXXX
                GET Seller response after receiving the MP_IBAN_AVAILABLE_FOR_PAYMENT event:
                  description: >-
                    GET Seller response after receiving the
                    MP_IBAN_AVAILABLE_FOR_PAYMENT event
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: PENDING_VALIDATION
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: PENDING_VALIDATION
                        dataStatus: PENDING_VALIDATION
                        documentListStatus: PENDING_VALIDATION
                    dataStatus: PENDING_VALIDATION
                    documentListStatus: PENDING_VALIDATION
                    onboardingProcessStatus: KYC_REQUESTED
                    identityVerification:
                      type: VIRTUAL_IBAN
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRPPXXX
                GET Seller response after receiving the MP_KYC_IN_PROGRESS event:
                  summary: >-
                    GET Seller response after receiving the MP_KYC_IN_PROGRESS
                    event COMPLETE
                  description: >-
                    GET Seller response after receiving the MP_KYC_IN_PROGRESS
                    event
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: PENDING_VALIDATION
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: PENDING_VALIDATION
                        dataStatus: PENDING_VALIDATION
                        documentListStatus: PENDING_VALIDATION
                    dataStatus: PENDING_VALIDATION
                    documentListStatus: PENDING_VALIDATION
                    onboardingProcessStatus: KYC_PENDING
                    identityVerification:
                      type: VIRTUAL_IBAN
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRPPXXX
                GET Seller response after receiving the MP_KYC_REFUSED event:
                  summary: GET Seller response after receiving the MP_KYC_REFUSED event
                  description: GET Seller response after receiving the MP_KYC_REFUSED event
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    sanctionsQuestionnaire:
                      entityType: REPORTING_FINANCIAL_INSTITUTION
                      activityOutsideEuScope: ONLY_THE_LEGAL_ENTITY
                      isActiveOutsideEu: true
                      isSubjectToSanctions: true
                      isLocatedInSanctionedCountry: true
                      isEngagedWithSanctionedParty: true
                    lastUpdateDateTime: '2024-07-28T22:25:51:000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: REFUSED
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: REFUSED
                        dataStatus: COMPLETE
                        documentListStatus: INCOMPLETE
                        kycReviewComment: 'ID : document illisible'
                    dataStatus: COMPLETE
                    documentListStatus: INCOMPLETE
                    kycReviewComment: 'ID : expired document'
                    onboardingProcessStatus: WAITING_FOR_CORRECTION
                    identityVerification:
                      type: VIRTUAL_IBAN
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRPPXXX
                GET Seller response after KYC_assessment and before receiving MP_IBAN_AVAILABLE_FOR_PAYMENT event:
                  summary: >-
                    GET Seller response after KYC_assessment and before
                    receiving MP_IBAN_AVAILABLE_FOR_PAYMENT event
                  description: >-
                    GET Seller response after KYC_assessment and before
                    receiving MP_IBAN_AVAILABLE_FOR_PAYMENT event
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: PENDING_VALIDATION
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: PENDING_VALIDATION
                        dataStatus: PENDING_VALIDATION
                        documentListStatus: PENDING_VALIDATION
                    dataStatus: PENDING_VALIDATION
                    documentListStatus: PENDING_VALIDATION
                    onboardingProcessStatus: KYC_REQUESTED
                GET Seller response when the OnboardingProcessStatus=TASKS_COMPLETED:
                  summary: >-
                    GET Seller response when the
                    OnboardingProcessStatus=TASKS_COMPLETED
                  description: >-
                    GET Seller response when the
                    OnboardingProcessStatus=TASKS_COMPLETED
                  value:
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    sanctionsQuestionnaire:
                      entityType: REPORTING_FINANCIAL_INSTITUTION
                      activityOutsideEuScope: ONLY_THE_LEGAL_ENTITY
                      isActiveOutsideEu: true
                      isSubjectToSanctions: true
                      isLocatedInSanctionnedCountry: true
                      isEngagedWithSanctionnedParty: true
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: REGISTERED
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_ic.pdf
                            type: IDENTITY_CARD
                            status: REGISTERED
                        dataStatus: COMPLETE
                        documentListStatus: COMPLETE
                    dataStatus: COMPLETE
                    documentListStatus: COMPLETE
                    onboardingProcessStatus: TASKS_COMPLETED
                GET Seller response when OnboardingProcessStatus=STARTED because the seller's documentListStatus is INCOMPLETE:
                  summary: >-
                    GET Seller response when OnboardingProcessStatus=STARTED
                    because the seller's documentListStatus is INCOMPLETE
                  description: >-
                    GET Seller response when OnboardingProcessStatus=STARTED
                    because the seller's documentListStatus is INCOMPLETE
                  value:
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    sanctionsQuestionnaire:
                      entityType: REPORTING_FINANCIAL_INSTITUTION
                      activityOutsideEuScope: ONLY_THE_LEGAL_ENTITY
                      isActiveOutsideEu: true
                      isSubjectToSanctions: true
                      isLocatedInSanctionnedCountry: true
                      isEngagedWithSanctionnedParty: true
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents: []
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_ic.pdf
                            type: IDENTITY_CARD
                            status: REGISTERED
                        dataStatus: COMPLETE
                        documentListStatus: COMPLETE
                    dataStatus: COMPLETE
                    documentListStatus: INCOMPLETE
                    onboardingProcessStatus: STARTED
                GET Seller response when a technical error occurred after a KYC assessment:
                  summary: >-
                    GET Seller response when a technical error occurred after a
                    KYC assessment
                  description: >-
                    GET Seller response when a technical error occurred after a
                    KYC assessment
                  value:
                    sellerId: 987456
                    merchantSellerId: 1234-azerty-56789
                    solutionCode: MPFRGE-S1YP
                    legalEntityName: Amazon France
                    address:
                      streetNumber: '4'
                      streetName: Roger Salengro
                      zipCode: '59000'
                      cityName: LILLE
                      countryCode: FR
                    email: contact@seller.com
                    phoneNumber: '+33666512877'
                    legalFormAcronym: SARL
                    legalEntityCapitalizationAmount: 10000
                    legalEntityCapitalizationCurrency: EUR
                    businessActivity:
                      typeCode: NAF
                      code: 01.11Z
                    externalRegistrations:
                      - code: SIRET
                        value: '12345678900012'
                        date: '2017-07-21'
                      - code: VAT
                        value: FR12345678901
                    legalNumberOfEmployeeRange: BETWEEN_1_AND_9
                    legalNetIncomeRange: BETWEEN_0_AND_4
                    legalAnnualTurnover: BETWEEN_0_AND_39
                    bankingInformation:
                      accountName: Societe Generale compte principal
                      iban: FR1420041010050500013M02606
                      bic: SOGEFRTT
                      currency: EUR
                    sanctionsQuestionnaire:
                      entityType: REPORTING_FINANCIAL_INSTITUTION
                      activityOutsideEuScope: ONLY_THE_LEGAL_ENTITY
                      isActiveOutsideEu: true
                      isSubjectToSanctions: true
                      isLocatedInSanctionnedCountry: true
                      isEngagedWithSanctionnedParty: true
                    lastUpdateDateTime: '2024-07-28T22:25:51.000Z'
                    documents:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        name: id_recto_verso_company_registration.pdf
                        type: COMPANY_REGISTRATION
                        status: PENDING_VALIDATION
                    contacts:
                      - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                        firstName: John
                        lastName: Snow
                        email: loan.Kee@seller.com
                        phoneNumber: '+33666512877'
                        involvement:
                          type: SHAREHOLDER
                          startDateTime: '2024-01-12T23:20:50.000Z'
                        occupationType: EMPLOYEE_IN_THE_PRIVATE_SECTOR
                        personalAssets: BETWEEN_0_AND_15
                        address:
                          streetNumber: '4'
                          streetName: Roger Salengro
                          zipCode: '75000'
                          cityName: Paris
                          countryCode: FR
                        effectiveBeneficiary: 25
                        commonTitle: MR
                        birthDate: '2000-09-09'
                        birthCityName: Lille
                        birthCountryCode: FR
                        nationality: FR
                        incomeRange: BETWEEN_0_AND_999
                        taxResidenceCountryCode: FR
                        taxResidenceTaxPayerId: 123456abc
                        documents:
                          - id: bdf8080-3ee3-4d07-8a95-774614391e0e
                            name: id_recto_verso_passport.pdf
                            type: IDENTITY_CARD
                            status: PENDING_VALIDATION
                        dataStatus: PENDING_VALIDATION
                        documentListStatus: PENDING_VALIDATION
                    dataStatus: PENDING_VALIDATION
                    documentListStatus: PENDING_VALIDATION
                    onboardingProcessStatus: TECHNICAL_ERROR
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The path parameter 'merchantSellerId' is too long. The max
                  length of the merchantSellerId is  {maxlength}
                requestMethod: GET
                requestURI: '/v1/sellers/{merchantSellerId}'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: GET
                requestURI: '/v1/sellers/{merchantSellerId}'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: GET
                requestURI: '/v1/sellers/{merchantSellerId}'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter merchantSellerId is unknown
                requestMethod: GET
                requestURI: '/v1/sellers/{merchantSellerId}'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: GET
                requestURI: '/v1/sellers/{merchantSellerId}'
    put:
      tags:
        - Sellers
      summary: Create or replace a Seller.
      description: >-
        - Create a new seller if it does not exist otherwise replace it.

        - The seller is identified by the seller's identifier as defined by the
        marketplace.

        - Update the entire resource of a seller.

        - The update of the seller is allowed only when its dataStatus is
        COMPLETE or INCOMPLETE.
      operationId: createOrReplaceSeller
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
      requestBody:
        description: Request for creation or replacement of the seller.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSellerRequest'
        required: true
      responses:
        '200':
          description: Seller is successfully registered or updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSellerResponse'
              examples:
                DataStatus COMPLETE:
                  summary: DataStatus COMPLETE
                  description: DataStatus COMPLETE
                  value:
                    dataStatus: COMPLETE
                    missingData: []
                If dataStatus is INCOMPLETE in case the address.countryCode=FR:
                  summary: >-
                    If dataStatus is INCOMPLETE in case the
                    address.countryCode=FR
                  description: >-
                    If dataStatus is INCOMPLETE in case the
                    address.countryCode=FR
                  value:
                    dataStatus: INCOMPLETE
                    missingData:
                      - email
                      - phoneNumber
                      - legalFormAcronym
                      - legalEntityCapitalizationAmount
                      - legalEntityCapitalizationCurrency
                      - businessActivity
                      - businessActivity.typeCode
                      - businessActivity.code
                      - externalRegistrations
                      - externalRegistrations.SIRET.code
                      - externalRegistrations.SIRET.value
                      - externalRegistrations.SIRET.date
                      - externalRegistrations.VAT.code
                      - externalRegistrations.VAT.value.
                      - legalNumberOfEmployeeRange
                      - legalNetIncomeRange
                      - legalAnnualTurnover
                      - bankingInformation
                      - bankingInformation.accountName
                      - bankingInformation.iban
                      - bankingInformation.bic
                      - bankingInformation.currency
                If dataStatus is INCOMPLETE in case the address.countryCode is different from FR:
                  summary: >-
                    If dataStatus is INCOMPLETE in case the address.countryCode
                    is different from FR
                  description: >-
                    If dataStatus is INCOMPLETE in case the address.countryCode
                    is different from FR
                  value:
                    dataStatus: INCOMPLETE
                    missingData:
                      - legalEntityName
                      - email
                      - phoneNumber
                      - legalFormAcronym
                      - legalEntityCapitalizationAmount
                      - legalEntityCapitalizationCurrency
                      - businessActivity
                      - businessActivity.typeCode
                      - businessActivity.code
                      - externalRegistrations
                      - externalRegistrations.REGISTRATION_NUM.code
                      - externalRegistrations.REGISTRATION_NUM.value
                      - externalRegistrations.REGISTRATION_NUM.date
                      - externalRegistrations.VAT.code
                      - externalRegistrations.VAT.value
                      - externalRegistrations.TIN.code
                      - externalRegistrations.TIN.value
                      - legalNumberOfEmployeeRange
                      - legalNetIncomeRange
                      - legalAnnualTurnover
                      - bankingInformation
                      - bankingInformation.accountName
                      - bankingInformation.iban
                      - bankingInformation.bic
                      - bankingInformation.currency
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: REQUEST_VALIDATION_ERROR
                errorMessage: '{{field}} must not be blank'
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter merchantSellerId is unknown
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to update seller data. The Seller's
                  dataStatus is XXXXX
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: PUT
                requestURI: '/v1/sellers/{merchantSellerId}'
  /transfers:
    get:
      tags:
        - Transfers
      summary: Retrieve all Transfers
      description: >-
        Retrieve the list of transfers created by a specific merchant
        (marketplace).
      operationId: retrieveTransfers
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transfers
    post:
      tags:
        - Transfers
      summary: Perform a transfer
      description: >-
        Make a transfer for a seller account or a marketplace account for
        purposes such as the payment of a subscription, of a fee or for
        commercial gesture. The transfers are always initiated by the merchant
        (marketplace), wether they are in its favor or in the seller's
        favor.There can never be a transfer between two sellers.
      operationId: createTransfer
      requestBody:
        description: transfer request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
        required: true
      responses:
        '201':
          description: The transfer has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/transfers
  /transactions:
    get:
      tags:
        - Transactions
      summary: Retrieve all transactions
      description: Retrieve the list of transactions for a specific merchant (marketplace).
      operationId: getTransactions
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: List of Transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transactions
    post:
      tags:
        - Transactions
      summary: Register a transaction
      description: Create a new instance of transaction related to the order.
      operationId: generateTransactions
      requestBody:
        description: transaction request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        '201':
          description: The transaction has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/transactions
  '/sellers/{sellerId}/payout-sellers':
    get:
      tags:
        - PayoutSellers
      summary: Retrieve all payoutSeller
      description: Retrieve the list of payoutSeller for a specific seller.
      operationId: retrievePayoutSellers
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
    post:
      tags:
        - PayoutSellers
      summary: Perform a payoutSeller
      description: >-
        A payoutSeller is used to transfer funds to the external bank account of
        the Seller.
      operationId: createPayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
      requestBody:
        description: payoutSeller request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutSellerRequest'
        required: true
      responses:
        '201':
          description: The payoutSeller has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
  '/sellers/{sellerId}/payout-seller-amounts':
    get:
      tags:
        - PayoutSellerAmounts
      summary: Retrieve all instances of payoutSellerAmount
      description: Retrieve the list of payoutSellerAmount for a specific Seller.
      operationId: retrievePayoutSellerAmounts
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
    post:
      tags:
        - PayoutSellerAmounts
      summary: Create a payoutSellerAmount
      description: >-
        A payoutSeller is used to transfer funds to the external bank account of
        the Seller from an amount.
      operationId: createPayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
      requestBody:
        description: payoutSellerAmount request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutSellerAmountRequest'
        required: true
      responses:
        '201':
          description: The payoutSellerAmount has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
  '/sellers/{merchantSellerId}/documents':
    post:
      tags:
        - Documents
      summary: Register a new document for the given seller.
      description: >
        - Register a new  document for the given seller.

        - Register a new document consisting of metadata and a file content that
        must be encoded in base64.

        - The document type "COMPANY_REGISTRATION" is required to achieve the
        status  COMPLETE about the completness of the document list of a seller,
        the other document types are optional.
      operationId: createDocument
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
      requestBody:
        description: Data used to create a new document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
        required: true
      responses:
        '201':
          description: Document is successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentCreationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The max length of the path parameter merchantSellerId is
                  {maxlength}
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter merchantSellerId is unknown
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to add a document for the given
                  seller. The seller's documentListStatus is in {xxxxx}
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/documents'
  '/sellers/{merchantSellerId}/contacts':
    post:
      tags:
        - Contacts
      summary: Create a new contact for the given seller.
      description: Create a new contact for the given seller.
      operationId: createTaskContact
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
      requestBody:
        description: Request for creating a new contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequest'
        required: true
      responses:
        '201':
          description: Contact is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContactResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: REQUEST_VALIDATION_ERROR
                errorMessage: '{{field}} must not be blank'
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter merchantSellerId is unknown
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: It is no longer possible to add new contact
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts'
  '/sellers/{merchantSellerId}/contacts/{contactId}/documents':
    post:
      tags:
        - Documents
      summary: Register a new document for the given contact.
      description: >
        - Register a new document for the given seller.

        - Register a new document consisting of metadata and a file content that
        must be encoded in base64.

        - At least one document of type "PASSPORT" or "IDENTITY_CARD" is
        required to reach status COMPLETE regarding the completeness of a
        contact's document list, other document types are optional
      operationId: createContactDocument
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
        - name: contactId
          in: path
          description: Unique technical identifier of the contact
          required: true
          schema:
            type: string
            format: uuid
          example: efbc8080-3ee3-4d07-8a95-994614391e4e
      requestBody:
        description: Data used to create a new document.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactDocumentRequest'
        required: true
      responses:
        '201':
          description: The document for Kyc has been well added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDocumentCreationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The max length of the path parameter merchantSellerId is
                  {maxlength}
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter `contactId ` is unknown
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to add a document for the given
                  contact. The contact's documentListStatus is in {xxxxx}
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}/documents'
  '/sellers/{merchantSellerId}/_assess-kyc':
    post:
      tags:
        - KYC assessment
      summary: >-
        Request a KYC assessment after completing the seller's data, contacts,
        and related documents.
      description: >
        The KYC assessments is only allowed when the onboardingProcessStatus is
        TASKS_COMPLETED that can happen in the following cases:
         1. If the seller's dataStatus and documentListStatus, as well as those of all its contacts are COMPLETE.
         2. If at least one of the seller's dataStatus or documentListStatus or that of its contacts, is COMPLETE and the others are VALIDATED.
      operationId: assessKyc
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
      responses:
        '202':
          description: Accepted. You will receive the result through webhook.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The max length of the path parameter merchantSellerId is
                  {maxlength}
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The given merchantSellerId is not found
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  To assess KYC, both sellers and contacts status must be
                  COMPLETED
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: POST
                requestURI: '/v1/sellers/{merchantSellerId}/_assess-kyc'
  /payout-merchants:
    get:
      tags:
        - PayoutMerchants
      summary: Retrieve all payoutMerchants
      description: >-
        Retrieve the list of payoutMerchant for a specific merchant
        (marketplace).
      operationId: retrievePayoutMerchants
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
    post:
      tags:
        - PayoutMerchants
      summary: Perform a payoutMerchant
      description: >-
        A payoutMerchant is used to transfer funds to the external bank account
        of the merchant (marketplace)
      operationId: createPayoutMerchant
      requestBody:
        description: payoutMerchant request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PayoutMerchantRequest'
        required: true
      responses:
        '201':
          description: The payoutMerchant has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/payout-merchants
  /orders:
    get:
      tags:
        - Orders
      summary: Retrieve all orders
      description: >-
        Retrieve the list of orders including products and transactions
        information for a specific merchant (marketplace).
      operationId: retrieveOrders
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: lastUpdateDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Date of the last update on the order. Using the ISO format in UTC
              YYYY-MM-DD (new transaction, new payout, other....)
            example: '2023-02-13'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/orders
    post:
      tags:
        - Orders
      summary: Order demand from the merchant
      description: Create a new instance of order by merchantGlobalOrderId.
      operationId: demandOrders
      requestBody:
        description: Order request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Order has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderPostResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/order-splits
  /order-splits:
    post:
      tags:
        - OrderSplits
      summary: Apply an order-split by sellers
      description: Split an order to allocate amounts to different sellers
      operationId: OrderSplits
      requestBody:
        description: Split order request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderSplitRequest'
        required: true
      responses:
        '200':
          description: OK Split has been applied
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: POST
                    requestURI: /v1/order-splits
  '/transactions/{transactionId}':
    get:
      tags:
        - Transactions
      summary: Retrieve a specific transaction
      description: Retrieve a transaction by transactionId (technical identifier)
      operationId: getTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the transaction
      responses:
        '200':
          description: List of Transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/transactions
    delete:
      tags:
        - Transactions
      summary: Delete a specific transaction
      description: Delete a transaction by transactionId (technical identifier)
      operationId: deleteTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the transaction
      responses:
        '204':
          description: The transaction has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transactions
    patch:
      tags:
        - Transactions
      summary: Update a specific transaction
      description: >-
        Update the dueDate of a transaction by transactionId (technical
        identifier)
      operationId: updateTransaction
      parameters:
        - name: transactionId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionPatchRequest'
        required: true
      responses:
        '200':
          description: The transaction has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PATCH
                    requestURI: /v1/transactions
  '/sellers/{merchantSellerId}/contacts/{contactId}':
    delete:
      tags:
        - Contacts
      summary: Delete a contact and its related documents.
      description: >
        Delete a contact and its related documents.

        It is not possible to delete a contact when the dataStatus is in
        "PENDING_VALIDATION" or "VALIDATED"
      operationId: deleteContact
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
        - name: contactId
          in: path
          description: Unique technical identifier of the contact
          required: true
          schema:
            type: string
            format: uuid
          example: efbc8080-3ee3-4d07-8a95-994614391e4e
      responses:
        '204':
          description: The specific contact is deleted.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: The path parameter `merchantSellerId` is not valid
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path  parameter `contactId ` is unknown
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to remove a contact for the given
                  seller. The contact's status is in VALIDATION_PENDING
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
    patch:
      tags:
        - Contacts
      summary: Update a part or an entire resource of a contact
      description: >
        - Update a part or the entire resource of a contact.

        - The three fields: firstName, lastName, email could not be updated with
        a null value.

        - Fields not included in the request should stay unmodified.

        - When a field is explicitely set to null, its value will be nullified
        in database.

        - This endpoint could be used to fill in a contact's missing data to get
        a dataStatus equal to COMPLETE.

        - The update of the contact resource is allowed when the dataStatus is
        COMPLETE or INCOMPLETE
      operationId: updateContact
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
        - name: contactId
          in: path
          description: Unique technical identifier of the contact
          required: true
          schema:
            type: string
            format: uuid
          example: efbc8080-3ee3-4d07-8a95-994614391e4e
      requestBody:
        description: Request for updating the contact.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactRequest'
        required: true
      responses:
        '200':
          description: Contact is successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContactResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: REQUEST_VALIDATION_ERROR
                errorMessage: '{{field}} must not be blank'
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The path parameter `contactId ` is unknown
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to update contact data. The contact's
                  dataStatus is XXXXX
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: PATCH
                requestURI: '/v1/sellers/{merchantSellerId}/contacts/{contactId}'
  '/orders/{orderId}':
    delete:
      tags:
        - Orders
      summary: Delete a specific order
      description: Delete an order by orderId (technical identifier)
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the order
      responses:
        '204':
          description: The order has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/orders
    patch:
      tags:
        - Orders
      summary: Update a specific order
      description: Update the amount of an order by orderId (technical identifier)
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderPatchRequest'
        required: true
      responses:
        '200':
          description: The order has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: PATCH
                    requestURI: /v1/orders
  '/transfers/{transferId}':
    get:
      tags:
        - Transfers
      summary: Retrieve a specific transfers
      description: Retrieve a transfer by transferId (technical identifier)
      operationId: retrieveTransfer
      parameters:
        - name: transferId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the transfer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransfersResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transfers
    delete:
      tags:
        - Transfers
      summary: Delete a specific transfer
      description: >-
        Delete a transfer by transferId (technical identifier). Only transfer
        with PENDING status can be deleted
      operationId: deleteTransfer
      parameters:
        - name: transferId
          in: path
          required: true
          schema:
            type: string
            description: Unique technical identifier of the transfer
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: DELETE
                    requestURI: /v1/transfers
  '/sellers/{sellerId}/payout-sellers/{payoutSellerId}':
    get:
      tags:
        - PayoutSellers
      summary: Retrieve a specific payoutSeller
      description: Retrieve specific payoutSeller by payoutSellerId (technical identifier)
      operationId: retrievePayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: payoutSellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the payoutSeller
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
    delete:
      tags:
        - PayoutSellers
      summary: Delete a payoutSeller
      description: >-
        To delete a payoutSeller, Only payoutSeller with PENDING status can be
        deleted
      operationId: deletePayoutSeller
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: payoutSellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the payoutSeller
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-sellers'
  '/sellers/{sellerId}/payout-seller-amounts/{payoutSellerAmountId}':
    get:
      tags:
        - PayoutSellerAmounts
      summary: Retrieve a specific payoutSellerAmount
      description: >-
        Retrieve specific payoutSellerAmount by payoutSellerAmountId (technical
        identifier)
      operationId: retrievePayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: payoutSellerAmountId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of payoutSellerAmount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutSellerAmountResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
    delete:
      tags:
        - PayoutSellerAmounts
      summary: >-
        Delete the specified instance of payoutSellerAmount by
        payoutSellerAmountId
      description: >-
        To delete a payoutSellerAmount, Only payoutSellerAmount with PENDING
        status can be deleted
      operationId: deletePayoutSellerAmount
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: payoutSellerAmountId
          in: path
          required: true
          schema:
            type: integer
            description: Unique technical identifier of payoutSellerAmount
      responses:
        '204':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: '/v1/sellers/{sellerId}/payout-seller-amounts'
  '/sellers/{sellerId}/accounts':
    get:
      tags:
        - Accounts
      summary: Retrieve the seller accounts
      description: Retrieve the accounts for a specific seller.
      operationId: retrieveAccountsBySellerId
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: sellerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the seller
        - name: balanceExtractionDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Balances extraction date of the account values. Default value is
              the current date
        - name: embeddedLines
          in: query
          required: false
          schema:
            type: boolean
            description: when Lines are needed in the answer. Default value FALSE.
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/accounts
  '/payout-merchants/{payoutMerchantId}':
    get:
      tags:
        - PayoutMerchants
      summary: Retrieve a specific payoutMerchant
      description: >-
        Retrieve specific payoutMerchant by payoutMerchantId (technical
        identifier)
      operationId: retrievePayoutMerchant
      parameters:
        - name: payoutMerchantId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the payoutMerchant
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutMerchantResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
    delete:
      tags:
        - PayoutMerchants
      summary: Delete a specific payoutMerchant
      description: >-
        To delete a payoutMerchant, Only payoutMerchant with PENDING status can
        be deleted
      operationId: deletePayoutMerchant
      parameters:
        - name: payoutMerchantId
          in: path
          required: true
          schema:
            type: integer
            format: int32
            description: Unique technical identifier of the payoutMerchant
      responses:
        '204':
          description: The payoutMerchant has been deleted
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/payout-merchants
      security:
        - oauth-2-legged:
            - 'marketplace:rw'
  /accounts:
    get:
      tags:
        - Accounts
      summary: Retrieve all accounts
      description: Retrieve the list of accounts for a specific merchant.
      operationId: retrieveAccounts
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: string
            description: 'Page number, starting from 1.'
            example: 1
            default: '1'
        - name: pageSize
          in: query
          required: false
          schema:
            type: string
            description: >-
              A limit on the number of objects to be returned. Limit can range
              between 1 and 100.
            example: 10
            default: '10'
        - name: balanceExtractionDate
          in: query
          required: false
          schema:
            type: string
            description: >-
              Balances extraction date of the account values. Default value is
              the current date
        - name: accountType
          in: query
          required: false
          schema:
            type: string
            description: type of the account to consider.
            enum:
              - ' SETTLEMENT, CANTONMENT, MAIN'
        - name: embeddedLines
          in: query
          required: false
          schema:
            type: boolean
            description: when Lines are needed in the answer. Default value FALSE.
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountsResponse'
        '401':
          description: Unauthorized. You must first authenticate to get a valid token.
          content:
            application/json:
              schema:
                type: object
        '403':
          description: Scope missing or insufficient permissions.
          content:
            application/json: {}
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              examples:
                Internal Server Error:
                  summary: Internal Server Error
                  description: Internal Server Error
                  value:
                    timestamp: '2022-07-28T22:25:51.000Z'
                    httpStatusCode: '500'
                    httpStatusMessage: Internal Server Error
                    errorMessage: Une erreur est survenue
                    requestMethod: GET
                    requestURI: /v1/accounts
  '/sellers/{merchantSellerId}/documents/{documentId}':
    delete:
      tags:
        - Documents
      summary: Delete the seller's document by specifying its unique ID.
      description: >
        - Delete the seller's document by specifying its unique ID.

        - It is not possible to delete the seller's document when the document
        status is "PENDING_VALIDATION" or "VALIDATED".
      operationId: deleteDocument
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
        - name: documentId
          in: path
          description: Document unique identifier
          required: true
          schema:
            type: string
            format: uuid
          example: bdf8080-3ee3-4d07-8a95-774614391e0e
      responses:
        '204':
          description: The specific document is successfully deleted.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The max length of the path parameter merchantSellerId is
                  {maxlength}
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The document is not found
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to delete a document for the given
                  seller. The seller's documentListStatus is  {xxxxx}
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: DELETE
                requestURI: '/v1/sellers/{merchantSellerId}/documents/{documentId}'
  '/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}':
    delete:
      tags:
        - Documents
      summary: Delete the contact's document by specifying its unique ID.
      description: >
        - Delete the contact's document by specifying its unique ID.

        - It is not possible to delete the contact's document when its status
        (documentListStatus and dataStatus) are in "PENDING_VALIDATION" or
        "VALIDATED".
      operationId: deleteContactDocument
      parameters:
        - name: merchantSellerId
          in: path
          description: >-
            - Unique identifier of the seller as defined by the merchant
            (Marketplace)

            - It must match this pattern: ^[a-zA-Z0-9_\\-.]{3,55}$
          required: true
          schema:
            maxLength: 55
            type: string
          example: 1234-azerty-56789
        - name: contactId
          in: path
          description: Unique technical identifier of the contact
          required: true
          schema:
            type: string
            format: uuid
          example: efbc8080-3ee3-4d07-8a95-994614391e4e
        - name: documentId
          in: path
          description: Document unique identifier
          required: true
          schema:
            type: string
            format: uuid
          example: bdf8080-3ee3-4d07-8a95-774614391e0e
      responses:
        '204':
          description: The specific contact is deleted.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '400'
                httpStatusMessage: Bad request
                errorCode: INVALID_ID
                errorMessage: >-
                  The max length of the path parameter merchantSellerId is
                  {maxlength}
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
        '401':
          description: Authentication Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '401'
                httpStatusMessage: Unauthorized
                errorCode: UNAUTHORIZED
                errorMessage: Authentication failed
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '403'
                httpStatusMessage: Forbidden
                errorCode: ACCESS_DENIED
                errorMessage: Access denied
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
        '404':
          description: Not Found Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '404'
                httpStatusMessage: Not found
                errorCode: ENTITY_NOT_FOUND
                errorMessage: The document is not found
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '409'
                httpStatusMessage: Conflict
                errorCode: INVALID_STATUS
                errorMessage: >-
                  It is no longer possible to delete a document for the given
                  contact. The contact's documentListStatus is  {xxxxx}
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaasExceptionHttpResponse'
              example:
                timestamp: '2022-07-28T22:25:51.000Z'
                httpStatusCode: '500'
                httpStatusMessage: Internal server error
                errorCode: INTERNAL_SERVER_ERROR
                errorMessage: The server encountered an error
                requestMethod: DELETE
                requestURI: >-
                  /v1/sellers/{merchantSellerId}/contacts/{contactId}/documents/{documentId}
components:
  schemas:
    Address:
      required:
        - cityName
        - countryCode
        - streetName
        - streetNumber
        - zipCode
      type: object
      properties:
        streetNumber:
          maxLength: 5
          type: string
          description: Number assigned to the building in the street
          example: '4'
        streetName:
          maxLength: 40
          type: string
          description: Name of the street
          example: Roger Salengro
        zipCode:
          maxLength: 5
          type: string
          description: Zip code of the address
          example: '59000'
        cityName:
          maxLength: 28
          type: string
          description: Name of the city
          example: LILLE
        countryCode:
          maxLength: 2
          type: string
          description: >-
            Code of the country ISO 3166-1 alpha-2, must match this pattern
            '[A-Z][A-Z]'
          example: FR
      description: Work address of the contact
    BankingInformation:
      type: object
      properties:
        accountName:
          maxLength: 50
          type: string
          description: >
            - Account name

            - The value must contain at least one character (number or letter)
            matching this pattern ^(?=.*[a-zA-Z0-9]).+$
          example: Société Générale compte principal
        iban:
          maxLength: 34
          type: string
          description: >
            - The International Bank Account Number is a code used
            internationally by financial institutions to uniquely identify the
            account of a customer at a financial institution.

            - It MUST match the ISO 13616 format:
            [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
          example: FR1420041010050500013M02606
        bic:
          maxLength: 11
          type: string
          description: >
            - Business Identifier Code. 

            - Code allocated to a financial or non-financial institution by the
            ISO 9362 Registration Authority.
          example: SOGEFRPPXX
        currency:
          type: string
          description: >-
            3 letter currency code as defined by ISO-4217. It must match this
            pattern [A-Z][A-Z][A-Z]
          format: iso-4217
          example: EUR
      description: Banking information of the seller.
    BusinessActivity:
      required:
        - code
        - typeCode
      type: object
      properties:
        typeCode:
          type: string
          description: |-
            Type code of the business activity referential/standard/norms:

            NACE: European classification of activities.
            NAF: French Nomenclature of activities.
          example: NAF
          enum:
            - NACE
            - NAF
        code:
          type: string
          description: >-
            Activity code belonging to the business referential.


            If typeCode=NACE then the code must match this pattern
            ^[0-9][0-9]\\.[0-9][0-9]$

            If typeCode=NAF then the code must match this pattern
            ^[0-9][0-9]\\.[0-9][0-9][A-Z]$
          example: 01.11Z
      description: Business activity of the seller
    ExternalRegistration:
      minimum: 0
      required:
        - code
        - value
      type: object
      properties:
        code:
          type: string
          description: >-
            An external registration code that uniquely identifies a company:


            VAT: Business VAT number.

            TIN: Taxpayer Identification Number.

            SIRET: Registration number if the registrationConuntry is FR.

            REGISTRATION_NUM: registration number if registrationCountry is
            other than the FR.
          example: SIRET
          enum:
            - SIRET
            - VAT
            - TIN
            - REGISTRATION_NUM
        value:
          maxLength: 20
          type: string
          description: An external registration value associated to the code
          example: '362521879'
        date:
          type: string
          description: >-
            Registration date that must match this pattern YYYY-MM-DD. This
            field is only required when the code is SIRET or REGISTRATION_NUM.
          example: '2017-07-21'
      description: >
        - The list of externalRegistration codes to be provided is: VAT, SIRET,
        REGISTRATION_NUM, TIN - The requirement of these codes is defined as
        follows:
          - The code VAT is always required.
          - The code "TIN"is required when the address.countryCode is not FR. It is required to specify the taxPayer Identification number of the provided taxResidenceCountry.
          - The code SIRET is required when the address.countryCode is FR.
          - The code REGISTRATION_NUM is required when the address.countryCode is other than the FR.
    SanctionsQuestionnaire:
      type: object
      properties:
        entityType:
          type: string
          description: >
            Defines the type of the legal entity of the seller:

            - REPORTING_FINANCIAL_INSTITUTION: Reporting financial institution

            - NON_REPORTING_FINANCIAL_INSTITUTION: Non-reporting financial
            institution

            - ACTIVE_NON_FINANCIAL_PUBLIC_INSTITUTION: Active non-financial
            Entity - governmental entities, Int. organizations

            - ACTIVE_NON_FINANCIAL_OTHER_INSTITUTION: Active non-financial
            entity - other

            - PASSIVE_NON_FINANCIAL_INSTITUTION: Passive non-financial entity -
            investment entity that is not participating jurisdiction FI
          example: REPORTING_FINANCIAL_INSTITUTION
          enum:
            - REPORTING_FINANCIAL_INSTITUTION
            - NON_REPORTING_FINANCIAL_INSTITUTION
            - ACTIVE_NON_FINANCIAL_PUBLIC_INSTITUTION
            - ACTIVE_NON_FINANCIAL_OTHER_INSTITUTION
            - PASSIVE_NON_FINANCIAL_INSTITUTION
        activityOutsideEuScope:
          type: string
          description: >
            The seller's entity and its business units, subsidiaries, and joint
            ventures have a commercial activity out side the European Union:

            - ONLY_THE_LEGAL_ENTITY: Only the legal entity

            - LEGAL_ENTITY_AND_100_PERCENT_HELD_SUBSIDIARIES: The legal entity
            and all its subsidiaries held at 100%

            - LEGAL_ENTITY_AND_MORE_THAN_50_PERCENT_HELD_SUBSIDIARIES: The legal
            entity and all its subsidiaries held at 50% or more

            - LEGAL_ENTITY_AND_LIST_OF_SUBSIDIARIES: The legal entity and a list
            of subsidiaries
          example: ONLY_THE_LEGAL_ENTITY
          enum:
            - ONLY_THE_LEGAL_ENTITY
            - LEGAL_ENTITY_AND_100_PERCENT_HELD_SUBSIDIARIES
            - LEGAL_ENTITY_AND_MORE_THAN_50_PERCENT_HELD_SUBSIDIARIES
            - LEGAL_ENTITY_AND_LIST_OF_SUBSIDIARIES
        isActiveOutsideEu:
          type: boolean
          description: >-
            - The entity and its business units, subsidiaries, and joint
            ventures have a commercial activity out side the European Union.

            - If set to true, then the following attributes
            (isSubjectToSanctions, isLocatedInSanctionedCountry,
            isEngagedWithSanctionedParty) will be required and it must be filled
            with the correct value
          example: true
        isSubjectToSanctions:
          type: boolean
          description: >
            - The entity, its subsidiaries, entities, employees, directors,
            beneficial owners, or joint ventures are subject to Economic
            Sanctions

            - When the field is optional and not filled, the default value is
            false.
          example: true
        isLocatedInSanctionedCountry:
          type: boolean
          description: >
            - The entity, its subsidiaries, or joint ventures, located within or
            operating from any countries or territories are subject to
            Comprehensive Sanctions.

            - When the field is optional and not filled, the default value is
            false.
          example: true
        isEngagedWithSanctionedParty:
          type: boolean
          description: >
            - The entity, its subsidiaries, or joint ventures, are engaged in
            transactions, investments, business, or other dealings that directly
            or indirectly involve or benefit.

            - When the field is optional and not filled, the default value is
            false.
          example: true
      description: >-
        Information that must be provided to verify whether the seller's entity
        is related to sanctioned matters
    TaskSellerRequest:
      required:
        - address
        - legalEntityName
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - Scalexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to by the
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        legalEntityName:
          maxLength: 40
          type: string
          description: Legal entity name of the seller.
          example: Amazon France
        address:
          $ref: '#/components/schemas/Address'
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\\-])*(?:[a-z0-9])\\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\\+[1-9]\\d{1,14}$
          example: '+33666512877'
        legalFormAcronym:
          type: string
          description: The company form of the seller.
          example: SARL
          enum:
            - SARL
            - SA
            - SNC
            - SCA
            - GIE
            - SCS
            - EURL
            - SCP
            - SC
            - ASSOCIATION
            - SOCIETE_DE_DROIT_ETRANGER
            - SAS
            - EARL
        legalEntityCapitalizationAmount:
          type: number
          description: Legal entity capitalization amount in a main unit of the currency.
          format: float
          example: 1000
        legalEntityCapitalizationCurrency:
          type: string
          description: >-
            3 letter currency code as defined by ISO-4217. It must match this
            pattern [A-Z][A-Z][A-Z]
          format: iso-4217
          example: EUR
        businessActivity:
          $ref: '#/components/schemas/BusinessActivity'
        externalRegistrations:
          type: array
          description: External registration list about the seller
          items:
            $ref: '#/components/schemas/ExternalRegistration'
        legalNumberOfEmployeeRange:
          type: string
          description: Business number of employees range
          example: BETWEEN_1_AND_9
          enum:
            - ZERO
            - BETWEEN_1_AND_9
            - BETWEEN_10_AND_99
            - BETWEEN_100_AND_249
            - MORE_THAN_250
        legalNetIncomeRange:
          type: string
          description: Business annual net income range (in k€)
          example: BETWEEN_0_AND_4
          enum:
            - BETWEEN_0_AND_4
            - BETWEEN_5_AND_9
            - BETWEEN_10_AND_49
            - BETWEEN_50_AND_149
            - BETWEEN_150_AND_499
            - MORE_THAN_500
        legalAnnualTurnover:
          type: string
          description: Business annual turnover (in k€)
          example: BETWEEN_100_AND_249
          enum:
            - BETWEEN_0_AND_39
            - BETWEEN_40_AND_99
            - BETWEEN_100_AND_249
            - BETWEEN_250_AND_999
            - BETWEEN_1000_AND_2999
            - BETWEEN_3000_AND_9999
            - BETWEEN_10000_AND_99999
            - MORE_THAN_100000
        bankingInformation:
          $ref: '#/components/schemas/BankingInformation'
        sanctionsQuestionnaire:
          $ref: '#/components/schemas/SanctionsQuestionnaire'
      description: Request for creation or replacement of the seller.
    PutSellerResponse:
      required:
        - dataStatus
        - missingData
      type: object
      properties:
        dataStatus:
          type: string
          description: |
            Status about The completeness of the data of the given seller
            - INCOMPLETE If any required data is missing
            - COMPLETE : ALL required data are available.
          example: INCOMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
        missingData:
          minItems: 0
          type: array
          description: >-
            List of missing data that are required to achieve
            dataStatus=COMPLETE
          example:
            - email
            - phoneNumber
            - legalFormAcronym
            - legalEntityCapitalizationAmount
            - legalEntityCapitalizationCurrency
            - businessActivity
            - businessActivity.typeCode
            - businessActivity.code
            - externalRegistrations
            - externalRegistrations.SIRET.code
            - externalRegistrations.SIRET.value.
            - externalRegistrations.SIRET.date
            - externalRegistrations.VAT.code
            - externalRegistrations.VAT.value.
            - legalNumberOfEmployeeRange
            - legalNetIncomeRange
            - legalAnnualTurnover
            - bankingInformation
            - bankingInformation.accountName
            - bankingInformation.iban
            - bankingInformation.bic
            - bankingInformation.currency
          items:
            type: string
    BaasExceptionHttpResponse:
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp of the error
          example: '2023-01-29T10:05:38.429Z'
        httpStatusCode:
          type: integer
          description: 'HTTP status code (404, 400, 500...)'
          format: int32
          example: 400
        httpStatusMessage:
          type: string
          description: >-
            HTTP status message ("Not Found", "Bad Request", "Internal Server
            Error"...)
          example: Bad Request
        errorCode:
          type: string
          description: >-
            The applicative error code. It is a machine readable code. Used when
            BAD_REQUEST error to provide details about the error.
          example: INVALID_EMAIL
        errorMessage:
          type: string
          description: >-
            The applicative error message. It is a human readable English
            message.
          example: The email address is not valid !
        errors:
          type: array
          description: 'List of { error code, error message }.'
          items:
            $ref: '#/components/schemas/ErrorCodeAndMessage'
        requestMethod:
          type: string
          description: >-
            HTTP method used to make the request ("GET", "POST", "PUT",
            "DELETE"...)
          example: POST
        requestURI:
          type: string
          description: HTTP URI used to make the request
          example: /v1/user-account/users
      description: Generic HTTP Error Response
    ErrorCodeAndMessage:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      description: 'List of { error code, error message }.'
    TransferRequest:
      required:
        - accountingEntry
        - amount
        - currencyCode
        - merchantTransferId
        - reasonCode
        - reasonLabel
        - sellerId
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        accountingEntry:
          type: string
          description: >-
            Identify the transfer way. TRANSFER_TO_MARKETPLACE is a payment from
            the seller to the marketplace. TRANSFER_TO_SELLER is the opposite
          example: TRANSFER_TO_MARKETPLACE
          enum:
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
        reasonCode:
          type: string
          description: >-
            Attach the transfer to a specific accounting category for reporting
            use
          example: SUBSCRIPTION
          enum:
            - SUBSCRIPTION
            - COMMERCIAL_GESTURE
            - OTHER
        reasonLabel:
          maxLength: 140
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Transfer execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default.
        amount:
          type: number
          description: Transfer Amount.
          format: float
          example: 65.15
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: '9887975454'
    TransferResponse:
      required:
        - accountingEntry
        - amount
        - currencyCode
        - executionDate
        - merchantTransferId
        - reasonCode
        - reasonLabel
        - sellerId
        - solutionCode
        - status
        - transferId
      type: object
      properties:
        transferId:
          type: integer
          description: Unique technical identifier of the transfer
          format: int32
          example: 123456789
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: '9887975454'
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        accountingEntry:
          type: string
          description: >-
            Identify the transfer way. TRANSFER_TO_MARKETPLACE is a payment from
            the seller to the marketplace. TRANSFER_TO_SELLER is the opposite
          example: TRANSFER_TO_MARKETPLACE
          enum:
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
        reasonCode:
          type: string
          description: >-
            Attach the transfer to a specific accounting category for reporting
            use
          example: SUBSCRIPTION
          enum:
            - SUBSCRIPTION
            - COMMERCIAL_GESTURE
            - OTHER
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Transfer execution date. Using the ISO format
            YYYY-MM-DDThh:mm:ss.SSSZ
        amount:
          type: number
          description: Transfer amount
          format: float
          example: 65.15
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        status:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
      description: List of transfers
    TransactionRequest:
      required:
        - amount
        - currencyCode
        - executionDate
        - merchantGlobalOrderId
        - merchantTransactionId
        - paymentMethodName
        - solutionCode
        - type
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          example: '2017-07-21'
    TransactionResponse:
      required:
        - amount
        - currencyCode
        - executionDate
        - isPaid
        - merchantGlobalOrderId
        - merchantTransactionId
        - paidAmount
        - paymentMethodName
        - solutionCode
        - transactionId
        - type
      type: object
      properties:
        transactionId:
          type: integer
          description: Unique technical transaction identifier
          format: int32
          example: 321
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        orderId:
          type: integer
          description: Unique technical identifier of the order
          format: int32
          example: 123456789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount.
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
            - UNKNOWN
        isPaid:
          type: boolean
          description: To know if the transaction's payment is received or not
          example: true
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          example: '2017-07-21'
        paidAmount:
          type: number
          description: >-
            amount already received for this transaction (value between 0 and
            amount)
          format: float
          example: 65
    PayoutSellerOrderRequest:
      required:
        - merchantGlobalOrderId
      type: object
      properties:
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        payoutRequestedAmount:
          type: number
          description: Payout request amount
          format: float
          example: 65
      description: >-
        Order related to the seller. if not specified the default value will be
        the total of all pending orders amount
    PayoutSellerRequest:
      required:
        - currencyCode
        - merchantPayoutSellerId
        - reasonLabel
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          maxLength: 140
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: >-
            Tnsfer related to the seller. if not specified the default value
            will be the total pending transfers amount
          items:
            $ref: '#/components/schemas/PayoutSellerTransferRequest'
        payoutOrders:
          type: array
          description: >-
            Order related to the seller. if not specified the default value will
            be the total of all pending orders amount
          items:
            $ref: '#/components/schemas/PayoutSellerOrderRequest'
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
    PayoutSellerTransferRequest:
      required:
        - merchantTransferId
      type: object
      properties:
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: 1234-azerty-56789
      description: >-
        Tnsfer related to the seller. if not specified the default value will be
        the total pending transfers amount
    PayoutPayment:
      required:
        - currencyCode
        - paymentAmount
        - paymentStatus
      type: object
      properties:
        paymentStatus:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
        paymentAmount:
          type: number
          description: Payment amount.
          format: float
          example: 85
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Payment related to the payoutSeller
    PayoutSellerOrderResponse:
      required:
        - currencyCode
        - merchantGlobalOrderId
        - payoutEffectiveAmount
        - payoutRequestedAmount
        - payoutResidualAmount
      type: object
      properties:
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        payoutRequestedAmount:
          type: number
          description: Payout Request amount.
          format: float
          example: 65
        payoutEffectiveAmount:
          type: number
          description: Payout amount.
          format: float
          example: 20
        payoutResidualAmount:
          type: number
          description: Payout available amount.
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Order to pay during the payoutSeller
    PayoutSellerResponse:
      required:
        - executionDate
        - merchantPayoutSellerId
        - payoutOrders
        - payoutPayment
        - payoutSellerId
        - reasonLabel
        - solutionCode
        - transfers
      type: object
      properties:
        payoutSellerId:
          type: integer
          description: Unique technical ID of the payoutSeller
          format: int32
          example: 4
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: Transfer to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerTransferResponse'
        payoutOrders:
          type: array
          description: Order to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerOrderResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
    PayoutSellerTransferResponse:
      required:
        - currencyCode
        - merchantTransferId
        - payoutAmount
      type: object
      properties:
        merchantTransferId:
          type: string
          description: External reference Id of the transfer on the merchant side.
          example: 1234-azerty-56789
        payoutAmount:
          type: number
          description: Payout amount.
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Transfer to pay during the payoutSeller
    PayoutRequest:
      required:
        - askedAmount
        - currencyCode
      type: object
      properties:
        askedAmount:
          type: number
          description: Amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Payout amount. Dafault value will be the available amount
    PayoutSellerAmountRequest:
      required:
        - merchantPayoutSellerAmountId
        - reasonLabel
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          maxLength: 140
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          example: '2023-04-22T06:00:00.000Z'
        payout:
          $ref: '#/components/schemas/PayoutRequest'
        merchantPayoutSellerAmountId:
          type: string
          description: >-
            External reference Id of the payoutSellerAmount on the merchant
            side.
          example: 1234-azerty-56789
    PayoutResponse:
      required:
        - askedAmount
        - currencyCode
        - payoutAmount
        - payoutAvailableAmount
      type: object
      properties:
        askedAmount:
          type: number
          description: asked amount for the payout
          format: float
          example: 65
        payoutAmount:
          type: number
          description: amount paid for the payout
          format: float
          example: 20
        payoutAvailableAmount:
          type: number
          description: amount available for payout after the payout execution
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Amounts belonging to the payoutSellerAmounts
    PayoutSellerAmountResponse:
      required:
        - executionDate
        - merchantPayoutSellerAmountId
        - payout
        - payoutPayment
        - payoutSellerAmountId
        - reasonLabel
        - solutionCode
      type: object
      properties:
        payoutSellerAmountId:
          type: integer
          description: Unique technical identifier of payoutSellerAmount
          format: int32
          example: 4
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          example: '2023-04-22T06:00:00.000Z'
        payout:
          $ref: '#/components/schemas/PayoutResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
        merchantPayoutSellerAmountId:
          type: string
          description: >-
            External reference Id of the payoutSellerAmount on the merchant
            side.
          example: 1234-azerty-56789
    CreateDocumentRequest:
      required:
        - fileContent
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 90
          type: string
          description: >
            - Original name of the uploaded file.

            - The document name MUST match the following pattern: 
            ^[^<>:;,?"\\*|/$]+.[A-Za-z]{3,}+$

            - The document name MUST end with an extension that represents its
            media format.

            - The  extensions MUST  match the following case-insensitive values
            pdf, jpeg, jpg, png.
          example: id_recto_verso_company_registration.pdf
        fileContent:
          type: string
          description: >-
            Content of the file object, base64 encoded characters. The max size
            of the file must not exceed 4 MO.
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        type:
          type: string
          description: Type of the document.
          example: COMPANY_REGISTRATION
          enum:
            - POLICE_RECORD
            - COMPANY_REGISTRATION
            - TURNOVER
            - BANK_IDENTITY_STATEMENT
            - RESIDENCE_PERMIT
            - PROXY_GRANTING_AN_EMPLOYEE
            - COMPANY_REGISTRATION_OFFICIAL_PAPER
            - OFFICIAL_TAX_CERTIFICATE
            - EMPLOYEE_PAYMENT_NOTICE
            - USER_BANK_STATEMENT
            - BUSINESS_LEGAL_STATUS
            - TAX_STATEMENT
            - EXEMPTION_STATEMENT
            - LIVENESS_RESULT
            - SIREN
            - RBE_LIST_OF_BENEFICIAL_OWNERS
            - PEP_ASSETS_DECLARATION
            - PROFESSIONAL_REVENUE_DECLARATION
            - NON_PROFIT_ORGANISATION_FINANCIAL_DECLARATION
      description: Document request data
    DocumentCreationResponse:
      type: object
      properties:
        documentId:
          type: string
          description: Unique identifier of the created document
          format: uuid
          example: 0bdf8080-3ee3-4d07-8a95-774614391e0e
        documentListStatus:
          type: string
          description: >
            Status about The completeness of the list of documents concerning
            the seller
                - COMPLETE: At least a document of type "COMPANY_REGISTRATION" is available in the seller's document list and none of the existing documents has the status=REFUSED.
                - INCOMPLETE:
                    - The document of type 'COMPANY_REGISTRATION' is either missing.
                    - Or there is one document in the list  that has a status of REFUSED.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
    ContactAddress:
      type: object
      properties:
        streetNumber:
          maxLength: 5
          type: string
          description: Number assigned to the building in the street
          example: '4'
        streetName:
          maxLength: 40
          type: string
          description: Name of the street
          example: Roger Salengro
        zipCode:
          maxLength: 5
          type: string
          description: Zip code of the address
          example: '59000'
        cityName:
          maxLength: 28
          type: string
          description: Name of the city
          example: LILLE
        countryCode:
          maxLength: 2
          type: string
          description: >-
            Code of the country ISO 3166-1 alpha-2, must match this pattern
            '[A-Z][A-Z]'
          example: FR
      description: Work address of the contact
    CreateContactInvolvementsRequest:
      type: object
      properties:
        type:
          type: string
          description: >-
            Involvement type of the contact inside the related organization
            (Seller). - SHAREHOLDER for effective beneficiary and
            LEGAL_REPRESENTATIVE for legal representative. - If the contact is
            both SHAREHOLDER and LEGAL_REPRESENTATIVE then put
            LEGAL_REPRESENTATIVE
          example: SHAREHOLDER
          enum:
            - SHAREHOLDER
            - LEGAL_REPRESENTATIVE
        startDateTime:
          type: string
          description: >-
            Start of the time period, using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. If startDateTime is not specified, the
            default value will be the dateTime of the entity registration.
          example: '2024-01-12T23:20:50.000Z'
      description: Contact involvement in the seller's organization.
    CreateContactRequest:
      required:
        - email
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          maxLength: 50
          type: string
          description: >-
            Contact's first name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: John
        lastName:
          maxLength: 50
          type: string
          description: >-
            Contact's last name. Contact's first name. It must match the
            following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: Snow
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\\-])*(?:[a-z0-9])\\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\\+[1-9]\\d{1,14}$
          example: '+33666512877'
        involvement:
          $ref: '#/components/schemas/CreateContactInvolvementsRequest'
        occupationType:
          type: string
          description: Type of occupation of the contact
          example: EMPLOYEE_IN_THE_PRIVATE_SECTOR
          enum:
            - PUPIL_STUDENT_APPRENTICE
            - BENEFICIARIES_OF_UNEMPLOYMENT_ASSISTANCE
            - WITHOUT_PROFESSIONAL_ACTIVITY
            - EXECUTIVE_PROFESSION_IN_THE_PRIVATE_SECTOR
            - EMPLOYEE_IN_THE_PRIVATE_SECTOR
            - BUSINESS_OWNER
            - EXECUTIVE_PROFESSION_IN_THE_PUBLIC_SECTOR
            - EMPLOYEE_IN_THE_PUBLIC_SECTOR
            - FARMER
            - SELF_EMPLOYED
            - CRAFTSMAN
            - SHOPKEEPER_AND_RELATED_PROFESSIONS
            - FREELANCE_PROFESSION
            - MEDICAL_FREELANCE_OR_PRACTITIONERS
            - RETIRED
        personalAssets:
          type: string
          description: |
            User's personal assets range exprimed in K€:
            - NONE: None
            - BETWEEN_0_AND_15: 0 to 15 000 euros
            - BETWEEN_15_AND_50: From 15 001 euros to 50 000 euros.
            - BETWEEN_50_AND_150: From 50 001 euros to 150 000 euros.
            - BETWEEN_150_AND_350: From 150 001 euros to 350 000 euros
            - BETWEEN_350_AND_750: From 350 001 euros to 750 000 euros.
            - BETWEEN_750_AND_1500: From 750 001 euros to 1 500 000 euros.
            - MORE_THAN_1500: Greater than 1 500 000 euros.
          example: BETWEEN_0_AND_15
          enum:
            - NONE
            - BETWEEN_0_AND_15
            - BETWEEN_15_AND_50
            - BETWEEN_50_AND_150
            - BETWEEN_150_AND_350
            - BETWEEN_350_AND_750
            - BETWEEN_750_AND_1500
            - MORE_THAN_1500
        address:
          $ref: '#/components/schemas/ContactAddress'
        effectiveBeneficiary:
          type: number
          description: >-
            percentage of ownership, if applicable (25.00 for 25%, 100.00 for
            100%, etc.)
          format: float
          example: 25
        commonTitle:
          type: string
          description: CivilityEnum of the physical person
          example: MR
          enum:
            - MR
            - MRS
            - MS
            - MISS
        birthDate:
          type: string
          description: Date of birth in the format YYYY-MM-DD.
          example: '2000-09-09'
        birthCityName:
          maxLength: 50
          type: string
          description: City of birth
          example: San Francisco
        birthCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        nationality:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        incomeRange:
          type: string
          description: |
            Monthly income range in EURO:
            - BETWEEN_0_AND_999 : 0 - 999 euros per month
            - BETWEEN_1000_AND_1800: 1000 - 1800 euros per month
            - BETWEEN_1801_AND_3500: 1801 - 3500 euros per month
            - BETWEEN_3501_AND_5000: 3501 - 5000 euros per month
            - BETWEEN_5001_AND_6500: 5001 - 6500 euros per month
            - BETWEEN_6501_AND_10000: 6501 - 10000 euros per month
            - MORE_THAN_10000: Greater than 10 000 euros per month
          example: BETWEEN_O_AND_999
          enum:
            - BETWEEN_0_AND_999
            - BETWEEN_1000_AND_1800
            - BETWEEN_1801_AND_3500
            - BETWEEN_3501_AND_5000
            - BETWEEN_5001_AND_6500
            - BETWEEN_6501_AND_10000
            - MORE_THAN_10000
        taxResidenceCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        taxResidenceTaxPayerId:
          maxLength: 50
          type: string
          description: >-
            If taxResidenceCountryCode is not FR, specify the taxPayerId of the
            provided taxResidenceCountry
          example: 123456abc
    CreateContactResponse:
      required:
        - contactId
        - dataStatus
        - missingData
      type: object
      properties:
        contactId:
          type: string
          description: Unique technical identifier of the contact.
          format: uuid
          example: efbc8080-3ee3-4d07-8a95-994614391e4e
        dataStatus:
          type: string
          description: >
            Status about The completeness of the data of the contact

            INCOMPLETE: Contact is created with INCOMPLETE status. There are
            missing data that must be completed to create a correct contact.

            COMPLETE : ALL required data are available to create a correct
            contact.
          example: INCOMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
        missingData:
          minItems: 0
          type: array
          description: >-
            List of missing data that are required to achieve
            dataStatus=COMPLETE
          example:
            - phoneNumber
            - involvement
            - involvement.type
            - involvement.startDateTime
            - occupationType
            - personalAssets
            - address
            - address.streetNumber
            - address.streetName
            - address.zipCode
            - address.cityName
            - address.countryCode
            - effectiveBeneficiary
            - commonTitle
            - birthDate
            - birthCityName
            - birthCountryCode
            - nationality
            - incomeRange
            - taxResidenceCountryCode
            - taxResidenceTaxPayerId
          items:
            type: string
    CreateContactDocumentRequest:
      required:
        - fileContent
        - name
        - type
      type: object
      properties:
        name:
          maxLength: 90
          type: string
          description: >
            - Original name of the uploaded file.

            - The document name MUST match the following pattern: 
            ^[^<>:;,?"\\*|/$]+.[A-Za-z]{3,}+$

            - The document name MUST end with an extension that represents its
            media format.

            - The  extensions MUST  match the following case-insensitive values
            pdf, jpeg, jpg, png.
          example: id_recto_verso_company_registration.pdf
        fileContent:
          type: string
          description: >-
            Content of the file object, base64 encoded characters. The max size
            of the file must not exceed 4 MO.
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        type:
          type: string
          description: Type of the document.
          example: IDENTITY_CARD
          enum:
            - POLICE_RECORD
            - CV
            - WORN_STATEMENT
            - IDENTITY_CARD
            - BANK_IDENTITY_STATEMENT
            - PROOF_OF_ADDRESS
            - MOBILE_PHONE_INVOICE
            - INVOICE_OTHER_THAN_MOBILE_PHONE_INVOICE
            - RESIDENCE_PERMIT
            - DRIVING_LICENCE
            - PASSPORT
            - ROXY_GRANTING_AN_EMPLOYEE
            - OFFICIAL_TAX_CERTIFICATE
            - USER_BANK_STATEMENT
            - TAX_STATEMENT
            - EXEMPTION_STATEMENT
            - LIVENESS_RESULT
            - HEALTH_INSURANCE_CARD
            - PEP_ASSETS_DECLARATION
            - PROFESSIONAL_REVENUE_DECLARATION
    ContactDocumentCreationResponse:
      type: object
      properties:
        documentId:
          type: string
          description: Unique identifier of the created document
          format: uuid
          example: 0bdf8080-3ee3-4d07-8a95-774614391e0e
        documentListStatus:
          type: string
          description: >
            Status about The completeness of the list of documents concerning
            the contact'
                - COMPLETE: At least a  document of type 'PASSPORT' or "IDENTITY_CARD" is available in the document list of the contact and none of the existing documents has the status=REFUSED.
                - INCOMPLETE:
                     - Neither a document of type 'PASSPORT' nor 'IDENTITY_CARD' is available in the document list of the contact.
                     - Or there is one document in the list that has a status of REFUSED.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
    PayoutMerchantRequest:
      required:
        - amount
        - currencyCode
        - merchantPayoutMerchantId
        - solutionCode
      type: object
      properties:
        merchantPayoutMerchantId:
          type: string
          description: External reference Id of the payoutMerchant on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          maxLength: 140
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            Execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ. Current date by default
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Payout merchant amount
          format: float
          example: 65
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
    PayoutMerchantResponse:
      required:
        - amount
        - currencyCode
        - executionDate
        - merchantPayoutMerchantId
        - payoutMerchantId
        - solutionCode
        - status
      type: object
      properties:
        payoutMerchantId:
          type: integer
          description: Unique technical identifier of the payoutMerchant
          format: int32
          example: 4
        merchantPayoutMerchantId:
          type: string
          description: External reference Id of the payoutMerchant on the merchant side.
          example: 1234-azerty-56789
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Payout merchant amount
          format: float
          example: 65
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        status:
          type: string
          description: status
          example: PENDING
          enum:
            - PENDING
            - VALIDATED
            - CANCELED
    Item:
      required:
        - amount
        - currencyCode
        - gtin
        - label
        - price
        - quantity
      type: object
      properties:
        gtin:
          type: string
          description: International reference
          example: '7512345678915'
        label:
          type: string
          description: description of the product
          example: Tea cup
        quantity:
          type: integer
          description: number of this products in the basket
          format: int32
          example: 4
        price:
          type: number
          description: Unit price of the item without discount.
          format: float
          example: 15.55
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        amount:
          type: number
          description: Total amount
          format: float
          example: 64
      description: Details of item purchased
    OrderRequest:
      required:
        - amount
        - currencyCode
        - merchantBuyerId
        - merchantGlobalOrderId
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        amount:
          type: number
          description: Total amount of the order
          format: float
          example: 64
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        orderType:
          type: string
          description: used to define the type of the order. Default value PURCHASE
          example: PURCHASE
          enum:
            - PURCHASE
            - CREDIT_NOTE
        merchantBuyerId:
          type: string
          description: External reference Id of the Buyer on the merchant side.
          example: 1234-azerty-56789
        items:
          type: array
          description: Items list belonging to the order
          items:
            $ref: '#/components/schemas/Item'
    OrderPostResponse:
      required:
        - orderId
      type: object
      properties:
        orderId:
          type: integer
          description: Unique technical order identifier
          format: int32
          example: 123456789
    OrderSplitRequest:
      required:
        - merchantGlobalOrderId
        - solutionCode
        - splits
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\w{4}-\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        splits:
          type: array
          description: splits related to the order
          items:
            $ref: '#/components/schemas/Seller'
    Seller:
      required:
        - amount
        - amountType
        - currencyCode
        - fee
        - feeType
        - model
        - sellerId
      type: object
      properties:
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        amount:
          type: number
          description: Split amount.
          format: float
          example: 65
        amountType:
          type: string
          description: >-
            SELLER_PAYMENT is the money is to pay the seller, SELLER_REFUND if
            the money goes back to the merchant
          example: SELLER_PAYMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
        fee:
          type: number
          description: Fee amount.
          format: float
          example: 65.15
        feeType:
          type: string
          description: >-
            MKTP_FEES is the fees is to pay the merchant, MKTP_FEES_BACK if the
            fees goes back to the seller (reimbursement)
          example: MKTP_FEES
          enum:
            - MKTP_FEES
            - MKTP_FEES_BACK
        currencyCode:
          maxLength: 3
          minLength: 3
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          example: EUR
        model:
          type: string
          description: >-
            used to know who is responsible from the sale. * 3P is a model in
            which the third-party seller is responsible for the product and
            bears the billing. * 2P is a buy-sell-on-the-fly model where the
            marketplace is responsible for invoicing
          example: 3P
          enum:
            - 2P
            - 3P
      description: splits related to the order
    TransactionPatchRequest:
      required:
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          example: '2017-07-21'
    UpdateContactRequest:
      type: object
      properties:
        firstName:
          maxLength: 50
          type: string
          description: >-
            Contact's first name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: John
        lastName:
          maxLength: 50
          type: string
          description: >-
            Contact's last name. Contact's first name. It must match the
            following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: Snow
        email:
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\\-])*(?:[a-z0-9])\\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\\+[1-9]\\d{1,14}$
          example: '+33666512877'
        involvement:
          $ref: '#/components/schemas/CreateContactInvolvementsRequest'
        occupationType:
          type: string
          description: Type of occupation of the contact
          example: EMPLOYEE_IN_THE_PRIVATE_SECTOR
          enum:
            - PUPIL_STUDENT_APPRENTICE
            - BENEFICIARIES_OF_UNEMPLOYMENT_ASSISTANCE
            - WITHOUT_PROFESSIONAL_ACTIVITY
            - EXECUTIVE_PROFESSION_IN_THE_PRIVATE_SECTOR
            - EMPLOYEE_IN_THE_PRIVATE_SECTOR
            - BUSINESS_OWNER
            - EXECUTIVE_PROFESSION_IN_THE_PUBLIC_SECTOR
            - EMPLOYEE_IN_THE_PUBLIC_SECTOR
            - FARMER
            - SELF_EMPLOYED
            - CRAFTSMAN
            - SHOPKEEPER_AND_RELATED_PROFESSIONS
            - FREELANCE_PROFESSION
            - MEDICAL_FREELANCE_OR_PRACTITIONERS
            - RETIRED
        personalAssets:
          type: string
          description: |
            User's personal assets range exprimed in K€:
            - NONE: None
            - BETWEEN_0_AND_15: 0 to 15 000 euros
            - BETWEEN_15_AND_50: From 15 001 euros to 50 000 euros.
            - BETWEEN_50_AND_150: From 50 001 euros to 150 000 euros.
            - BETWEEN_150_AND_350: From 150 001 euros to 350 000 euros
            - BETWEEN_350_AND_750: From 350 001 euros to 750 000 euros.
            - BETWEEN_750_AND_1500: From 750 001 euros to 1 500 000 euros.
            - MORE_THAN_1500: Greater than 1 500 000 euros.
          example: BETWEEN_0_AND_15
          enum:
            - NONE
            - BETWEEN_0_AND_15
            - BETWEEN_15_AND_50
            - BETWEEN_50_AND_150
            - BETWEEN_150_AND_350
            - BETWEEN_350_AND_750
            - BETWEEN_750_AND_1500
            - MORE_THAN_1500
        address:
          $ref: '#/components/schemas/ContactAddress'
        effectiveBeneficiary:
          type: number
          description: >-
            percentage of ownership, if applicable (25.00 for 25%, 100.00 for
            100%, etc.)
          format: float
          example: 25
        commonTitle:
          type: string
          description: CivilityEnum of the physical person
          example: MR
          enum:
            - MR
            - MRS
            - MS
            - MISS
        birthDate:
          type: string
          description: Date of birth in the format YYYY-MM-DD.
          example: '2000-09-09'
        birthCityName:
          maxLength: 50
          type: string
          description: City of birth
          example: San Francisco
        birthCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        nationality:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        incomeRange:
          type: string
          description: |
            Monthly income range in EURO:
            - BETWEEN_0_AND_999 : 0 - 999 euros per month
            - BETWEEN_1000_AND_1800: 1000 - 1800 euros per month
            - BETWEEN_1801_AND_3500: 1801 - 3500 euros per month
            - BETWEEN_3501_AND_5000: 3501 - 5000 euros per month
            - BETWEEN_5001_AND_6500: 5001 - 6500 euros per month
            - BETWEEN_6501_AND_10000: 6501 - 10000 euros per month
            - MORE_THAN_10000: Greater than 10 000 euros per month
          example: BETWEEN_0_AND_999
          enum:
            - BETWEEN_0_AND_999
            - BETWEEN_1000_AND_1800
            - BETWEEN_1801_AND_3500
            - BETWEEN_3501_AND_5000
            - BETWEEN_5001_AND_6500
            - BETWEEN_6501_AND_10000
            - MORE_THAN_10000
        taxResidenceCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        taxResidenceTaxPayerId:
          maxLength: 50
          type: string
          description: >-
            If taxResidenceCountryCode is not FR, specify the taxPayerId of the
            provided taxResidenceCountry
          example: 123456abc
    UpdateContactResponse:
      required:
        - dataStatus
        - missingData
      type: object
      properties:
        dataStatus:
          type: string
          description: >
            Status about The completeness of the data of the contact

            INCOMPLETE: Contact is created with INCOMPLETE status. There are
            missing data that must be completed to create a correct contact.

            COMPLETE : ALL required data are available to create a correct
            contact.
          example: INCOMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
        missingData:
          minItems: 0
          type: array
          description: >-
            List of missing data that are required to achieve
            dataStatus=COMPLETE
          example:
            - phoneNumber
            - involvement
            - involvement.type
            - involvement.startDateTime
            - occupationType
            - personalAssets
            - address
            - address.streetNumber
            - address.streetName
            - address.zipCode
            - address.cityName
            - address.countryCode
            - effectiveBeneficiary
            - commonTitle
            - birthDate
            - birthCityName
            - birthCountryCode
            - nationality
            - incomeRange
            - taxResidenceCountryCode
            - taxResidenceTaxPayerId
          items:
            type: string
      description: The result of the evaluation of the data completeness.
    OrderPatchRequest:
      required:
        - solutionCode
      type: object
      properties:
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        amount:
          type: number
          description: amount of the order
          format: float
          example: 64
    OrderResponse:
      required:
        - amount
        - currencyCode
        - items
        - lastUpdateTimestamp
        - merchantBuyerId
        - merchantGlobalOrderId
        - orderId
        - orderSplits
        - orderType
        - payoutSellers
        - registrationTimestamp
        - solutionCode
        - transactions
      type: object
      properties:
        orderId:
          type: integer
          description: Unique technical identifier of the order.
          format: int32
          example: 123456
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - scaleexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to  by the 
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the Order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        amount:
          type: number
          description: Total amount of the order.
          format: float
          example: 65.15
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        orderType:
          type: string
          description: used to define the type of the order. Default value PURCHASE
          example: PURCHASE
          enum:
            - PURCHASE
            - CREDIT_NOTE
        merchantBuyerId:
          type: string
          description: External reference Id of the Buyer on the merchant side.
          example: 1234-azerty-56789
        registrationTimestamp:
          type: string
          description: >-
            Creation order date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        lastUpdateTimestamp:
          type: string
          description: >-
            Date of the last update on the order. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        items:
          type: array
          description: Items list belonging to the order
          items:
            $ref: '#/components/schemas/Item'
        transactions:
          type: array
          description: Transactions list belonging to the order
          items:
            $ref: '#/components/schemas/Transaction'
        orderSplits:
          type: array
          description: Splits list belonging to the order
          items:
            $ref: '#/components/schemas/OrderSplit'
        payoutSellers:
          type: array
          description: PayoutSellers list belonging to the order
          items:
            $ref: '#/components/schemas/PayoutSeller'
      description: List of orders
    OrderSplit:
      required:
        - splits
      type: object
      properties:
        splits:
          type: array
          items:
            $ref: '#/components/schemas/Split'
      description: Splits list belonging to the order
    PayoutOrderResponse:
      required:
        - currencyCode
        - payoutEffectiveAmount
        - payoutResidualAmount
      type: object
      properties:
        payoutRequestedAmount:
          type: number
          description: Payout Request amount.
          format: float
          example: 65
        payoutEffectiveAmount:
          type: number
          description: Payout amount.
          format: float
          example: 20
        payoutResidualAmount:
          type: number
          description: Payout available amount.
          format: float
          example: 0
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
      description: Order to pay during the payoutSeller
    PayoutSeller:
      required:
        - executionDate
        - merchantPayoutSellerId
        - payoutOrders
        - payoutPayment
        - payoutSellerId
        - reasonLabel
        - transfers
      type: object
      properties:
        payoutSellerId:
          type: integer
          description: Unique technical ID of the payoutSeller.
          format: int32
          example: 123456789
        merchantPayoutSellerId:
          type: string
          description: External reference Id of the payoutSeller on the merchant side.
          example: 1234-azerty-56789
        reasonLabel:
          type: string
          description: >-
            Label of the payout. Max 140 characters. Displayed to the receiver
            of funds.
          example: payout for April 2023
        executionDate:
          type: string
          description: >-
            PayoutSellers execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        transfers:
          type: array
          description: Transfer to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutSellerTransferResponse'
        payoutOrders:
          type: array
          description: Order to pay during the payoutSeller
          items:
            $ref: '#/components/schemas/PayoutOrderResponse'
        payoutPayment:
          $ref: '#/components/schemas/PayoutPayment'
      description: PayoutSellers list belonging to the order
    Split:
      required:
        - amount
        - amountType
        - currencyCode
        - fee
        - feeType
        - isCashed
        - model
        - sellerId
        - splitProducerFeeAmount
      type: object
      properties:
        sellerId:
          type: integer
          description: Unique internal identifier for a seller
          format: int32
          example: 123456789
        amount:
          type: number
          description: Amount.
          format: float
          example: 65
        amountType:
          type: string
          description: >-
            SELLER_PAYMENT is the money is to pay the seller, SELLER_REFUND if
            the money goes back to the merchant
          example: SELLER_PAYMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
        fee:
          type: number
          description: Fee amount.
          format: float
          example: 65
        feeType:
          type: string
          description: >-
            MKTP_FEES is the fees is to pay the merchant, MKTP_FEES_BACK if the
            fees goes back to the seller (reimbursement)
          example: MKTP_FEES
          enum:
            - MKTP_FEES
            - MKTP_FEES_BACK
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          example: EUR
        model:
          type: string
          description: >-
            used to know who is responsible from the sale. * 3P is a model in
            which the third-party seller is responsible for the product and
            bears the billing. * 2P is a buy-sell-on-the-fly model where the
            marketplace is responsible for invoicing
          example: 3P
          enum:
            - 2P
            - 3P
        splitProducerFeeAmount:
          type: number
          description: The fee amount dedicated for the producer.
          format: float
          example: 65
        isCashed:
          type: boolean
          description: to know if the line is cashed or still pending
          example: true
    Transaction:
      required:
        - amount
        - currencyCode
        - dueDate
        - executionDate
        - isPaid
        - merchantTransactionId
        - paidAmount
        - paymentMethodName
        - transactionId
        - type
      type: object
      properties:
        transactionId:
          type: integer
          description: Unique technical Id
          format: int32
          example: 123456789
        type:
          type: string
          description: type of the transaction
          example: PAYMENT
          enum:
            - PAYMENT
            - REFUND
            - CREDIT
            - CHARGEBACK
            - CHARGEBACK_REFUND
        executionDate:
          type: string
          description: >-
            Transaction execution date. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        amount:
          type: number
          description: Transaction amount.
          format: float
          example: 64
        currencyCode:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        merchantTransactionId:
          type: string
          description: External reference Id of the transaction on the merchant side.
          example: 1234-azerty-56789
        paymentMethodName:
          type: string
          description: payment method name
          example: PAYXPERT_SG
          enum:
            - PAYXPERT_SG
            - SOGECOMMERCE_SG
            - SCT
            - FINTECTURE
            - UNKNOWN
        isPaid:
          type: boolean
          description: To know if the transaction's payment is received or not
          example: true
        dueDate:
          type: string
          description: the date notation as yyyy-mm-dd.
          example: '2017-07-21'
        paidAmount:
          type: number
          description: >-
            amount already received for this transaction (value between 0 and
            amount)
          format: float
          example: 65
      description: Transactions list belonging to the order
    TransfersResponse:
      required:
        - pageCount
        - transfers
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        transfers:
          type: array
          description: List of transfers
          items:
            $ref: '#/components/schemas/TransferResponse'
    TransactionsResponse:
      required:
        - pageCount
        - transactions
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of page
          format: int32
          example: 1
        transactions:
          type: array
          description: List of transactions
          items:
            $ref: '#/components/schemas/TransactionResponse'
    PayoutSellersResponse:
      required:
        - pageCount
        - payoutSellers
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        payoutSellers:
          type: array
          description: List of payoutSellers
          items:
            $ref: '#/components/schemas/PayoutSellerResponse'
    PayoutSellerAmountsResponse:
      required:
        - pageCount
        - payoutSellerAmounts
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        payoutSellerAmounts:
          type: array
          description: List of payoutSellerAmounts
          items:
            $ref: '#/components/schemas/PayoutSellerAmountResponse'
    Account:
      required:
        - accountType
        - balanceExtractionDate
        - balancesHistory
        - currency
        - currentBalance
        - forecastBalance
      type: object
      properties:
        accountType:
          type: string
          description: the type of account
          example: SETTLEMENT
          enum:
            - SETTLEMENT
            - CANTONMENT
            - MAIN
        balanceExtractionDate:
          type: string
          description: >-
            Extraction date of the currentBalance and forecastBalance fields.
            Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        currentBalance:
          type: number
          description: >-
            account balance when the request is made (whatever the date in
            query)
          format: float
          example: 9999.99
        forecastBalance:
          type: number
          description: account forecasted balance when the request is made
          format: float
          example: 4850
        currency:
          type: string
          description: >-
            Currency code applicable to prices based on ISO4217. 3 letter
            currency code
          format: iso-4217
          example: EUR
        balancesHistory:
          $ref: '#/components/schemas/BalancesHistory'
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Line'
      description: >-
        accounts belonging to the Marketplace. An empty accounts list is
        returned , if no items is retrieved.
    AccountsResponse:
      required:
        - accounts
        - pageCount
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        accounts:
          type: array
          description: >-
            accounts belonging to the Marketplace. An empty accounts list is
            returned , if no items is retrieved.
          items:
            $ref: '#/components/schemas/Account'
    BalancesHistory:
      required:
        - date
        - openingBalance
      type: object
      properties:
        openingBalance:
          type: number
          description: balance in the beginning of the day requested
          format: float
          example: 4500.1
        closingBalance:
          type: number
          description: >-
            balance at the end of the day requested (if the requested day is
            closed)
          format: float
          example: 6321.11
        date:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          example: '2023-04-22T06:00:00.000Z'
    Line:
      required:
        - accountingEntry
        - amount
        - isCashed
        - lineId
        - lineType
        - merchantGlobalOrderId
        - operationDate
      type: object
      properties:
        lineId:
          type: integer
          description: Unique technical identifier.
          format: int32
          example: 123456
        accountingEntry:
          type: string
          description: type of the entry to classify into the different accounts
          example: SETTLEMENT
          enum:
            - SELLER_PAYMENT
            - SELLER_REFUND
            - MKTP_FEES
            - BMPS_FEES
            - MKTP_FEES_BACK
            - BMPS_FEES_BACK
            - TRANSFER_TO_MARKETPLACE
            - TRANSFER_TO_SELLER
            - ACQUIRING_FEE_BAILOUT
            - PAYIN_CREDIT_BAILOUT
            - PAYIN_REFUND_BAILOUT
            - ROLLING_RESERVE_ACQ_EVOL_BAILOUT
            - PAYIN_PAYMENT
            - PAYIN_REFUND
            - PAYIN_CREDIT
            - COLLECTE_SETTLEMENT
            - SETTLEMENT_CANTONMENT
            - CASHOUT_MKTP
            - CASHOUT_SELLER
            - STANDARD_DEPOSIT
            - PAYIN_UNPAID_BAILOUT
            - PAYIN_UNPAID_CHBCK
        accountingLabel:
          type: string
          description: label associated to accountingEntry for display purpose
          example: transfer or payment reason or other
        merchantGlobalOrderId:
          type: string
          description: >-
            External reference Id of the order on the merchant side as a whole -
            as long as the items are not dispatched separately.
          example: 1234-azerty-56789
        operationDate:
          type: string
          description: 'Execution date. Using the ISO format in UTC YYYY-MM-DDThh:mm:ss.SSSZ'
          example: '2023-04-22T06:00:00.000Z'
        cashedDate:
          type: string
          description: >-
            Date of cash execution. Using the ISO format in UTC
            YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2023-04-22T06:00:00.000Z'
        isCashed:
          type: boolean
          description: to know if the line is cashed or still pending
        lineType:
          type: string
          description: Line Type
          example: DEBIT
          enum:
            - DEBIT
            - CREDIT
        amount:
          type: number
          description: credited or debited amount.
          format: float
          example: 65
      description: All transactions lines on the account
    Contact:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the contact
          format: uuid
          example: 0bdf8080-3ee3-4d07-8a95-774614391e0e
        firstName:
          maxLength: 50
          type: string
          description: >-
            Contact first name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: John
        lastName:
          maxLength: 50
          type: string
          description: >-
            Contact last name. It must match the following pattern
            ^[a-zA-ZàáâäãåąčćęèéêëėįìíîïłńòóôöõøùúûüųūÿýżźñçčšžÀÁÂÄÃÅĄĆČĖĘÈÉÊËÌÍÎÏĮŁŃÒÓÔÖÕØÙÚÛÜŲŪŸÝŻŹÑßÇŒÆČŠŽ∂ð
            ,.'-]+$
          example: Snow
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\\-])*(?:[a-z0-9])\\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\\+[1-9]\\d{1,14}$
          example: '+33666512877'
        involvement:
          $ref: '#/components/schemas/CreateContactInvolvementsRequest'
        occupationType:
          type: string
          description: Type of occupation of the contact
          example: EMPLOYEE_IN_THE_PRIVATE_SECTOR
          enum:
            - PUPIL_STUDENT_APPRENTICE
            - BENEFICIARIES_OF_UNEMPLOYMENT_ASSISTANCE
            - WITHOUT_PROFESSIONAL_ACTIVITY
            - EXECUTIVE_PROFESSION_IN_THE_PRIVATE_SECTOR
            - EMPLOYEE_IN_THE_PRIVATE_SECTOR
            - BUSINESS_OWNER
            - EXECUTIVE_PROFESSION_IN_THE_PUBLIC_SECTOR
            - EMPLOYEE_IN_THE_PUBLIC_SECTOR
            - FARMER
            - SELF_EMPLOYED
            - CRAFTSMAN
            - SHOPKEEPER_AND_RELATED_PROFESSIONS
            - FREELANCE_PROFESSION
            - MEDICAL_FREELANCE_OR_PRACTITIONERS
            - RETIRED
        personalAssets:
          type: string
          description: |
            User's personal assets range exprimed in K€:
            - NONE: None
            - BETWEEN_0_AND_15: 0 to 15 000 euros
            - BETWEEN_15_AND_50: From 15 001 euros to 50 000 euros.
            - BETWEEN_50_AND_150: From 50 001 euros to 150 000 euros.
            - BETWEEN_150_AND_350: From 150 001 euros to 350 000 euros
            - BETWEEN_350_AND_750: From 350 001 euros to 750 000 euros.
            - BETWEEN_750_AND_1500: From 750 001 euros to 1 500 000 euros.
            - MORE_THAN_1500: Greater than 1 500 000 euros.
          example: BETWEEN_0_AND_15
          enum:
            - NONE
            - BETWEEN_0_AND_15
            - BETWEEN_15_AND_50
            - BETWEEN_50_AND_150
            - BETWEEN_150_AND_350
            - BETWEEN_350_AND_750
            - BETWEEN_750_AND_1500
            - MORE_THAN_1500
        address:
          $ref: '#/components/schemas/Address'
        effectiveBeneficiary:
          type: number
          description: >-
            percentage of ownership, if applicable (25.00 for 25%, 100.00 for
            100%, etc.)
          format: float
          example: 25
        commonTitle:
          type: string
          description: CivilityEnum of the physical person
          example: MR
          enum:
            - MR
            - MRS
            - MS
            - MISS
        birthDate:
          type: string
          description: Date of birth in the format YYYY-MM-DD.
          example: '2000-09-09'
        birthCityName:
          maxLength: 50
          type: string
          description: City of birth
          example: San Francisco
        birthCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        nationality:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        incomeRange:
          type: string
          description: |
            Monthly income range in EURO:
            - BETWEEN_0_AND_999 : 0 - 999 euros per month
            - BETWEEN_1000_AND_1800: 1000 - 1800 euros per month
            - BETWEEN_1801_AND_3500: 1801 - 3500 euros per month
            - BETWEEN_3501_AND_5000: 3501 - 5000 euros per month
            - BETWEEN_5001_AND_6500: 5001 - 6500 euros per month
            - BETWEEN_6501_AND_10000: 6501 - 10000 euros per month
            - MORE_THAN_10000: Greater than 10 000 euros per month
          example: BETWEEN_0_AND_999
          enum:
            - BETWEEN_0_AND_999
            - BETWEEN_1000_AND_1800
            - BETWEEN_1801_AND_3500
            - BETWEEN_3501_AND_5000
            - BETWEEN_5001_AND_6500
            - BETWEEN_6501_AND_10000
            - MORE_THAN_10000
        taxResidenceCountryCode:
          maxLength: 2
          type: string
          description: >-
            Country code (Format ISO 3166-1 alpha-2), must match this pattern
            '[A-Z][A-Z]'
          example: FR
        taxResidenceTaxPayerId:
          maxLength: 50
          type: string
          description: >-
            If taxResidenceCountryCode is not FR, specify the taxPayerId of the
            provided taxResidenceCountry
          example: 123456abc
        documents:
          minimum: 0
          type: array
          description: >-
            List of the contact documents. Each item contains the document
            metadata and no file content.

            Documents will be an empty array, if no document is registered.
          items:
            $ref: '#/components/schemas/ContactDocument'
        dataStatus:
          type: string
          description: >
            Evaluation result (completeness or KYC assessment result) of the
            data of the given contact.
                      - INCOMPLETE:  If any required data is missing to create a contact with COMPLETE status.
                      - COMPLETE : ALL required data are available to create a contact.
                      - PENDING_VALIDATION: KYC assessment is in progress.
                      - VALIDATED: The contact data are successfully validated.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
            - PENDING_VALIDATION
            - VALIDATED
        documentListStatus:
          type: string
          description: >
            Evaluation result (completeness or KYC assessment result) about the
            list of documents concerning the contact'
                     - COMPLETE: At least a  document of type 'PASSPORT' or "IDENTITY_CARD" is available in the document list of the contact and none of the existing documents has the status=REFUSED.
                     - INCOMPLETE:
                       - Neither a document of type 'PASSPORT' nor 'IDENTITY_CARD' is available in the document list of the contact.
                       - Or there is one document in the list that has a status of REFUSED.
                     - PENDING_VALIDATION: KYC assessment is in progress.
                     - VALIDATED: All documents are successfully validated.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
            - PENDING_VALIDATION
            - VALIDATED
      description: >-
        Represents the contact data, the list of documents owned by the contact
        and the evaluation result (completness and KYC assessment) of the data
        and documents.
    ContactDocument:
      minimum: 0
      required:
        - status
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the document
          format: uuid
          example: 0bdf8080-3ee3-4d07-8a95-774614391e0e
        name:
          maxLength: 90
          type: string
          description: >-
            Original name of the uploaded file. The fileName ends with an
            extension that represents its media format. The extensions match the
            following case-insensitive values pdf, jpeg, jpg, png, tiff.
          example: id_recto_verso_passport.pdf
        type:
          type: string
          description: Type of the document.
          example: IDENTITY_CARD
          enum:
            - POLICE_RECORD
            - CV
            - WORN_STATEMENT
            - IDENTITY_CARD
            - BANK_IDENTITY_STATEMENT
            - PROOF_OF_ADDRESS
            - MOBILE_PHONE_INVOICE
            - INVOICE_OTHER_THAN_MOBILE_PHONE_INVOICE
            - RESIDENCE_PERMIT
            - DRIVING_LICENCE
            - PASSPORT
            - ROXY_GRANTING_AN_EMPLOYEE
            - OFFICIAL_TAX_CERTIFICATE
            - USER_BANK_STATEMENT
            - TAX_STATEMENT
            - EXEMPTION_STATEMENT
            - LIVENESS_RESULT
            - HEALTH_INSURANCE_CARD
            - PEP_ASSETS_DECLARATION
            - PROFESSIONAL_REVENUE_DECLARATION
        status:
          type: string
          description: >
            Status represents the lifecycle state of the specific document from
            KYC document collection to KYC assessment:

            - REGISTERED: The document is successfully registered and it is not
            yet verified.

            - PENDING_VALIDATION: KYC assessment of the document is in progress.

            - VALIDATED: The result of the KYC assessment of the document is
            VALIDATED.

            - REFUSED: The result of the KYC assessment of the document is
            REFUSED.
          example: REGISTERED
          enum:
            - REGISTERED
            - PENDING_VALIDATION
            - VALIDATED
            - REFUSED
      description: >
        The Document describes the metadata of a document owned by a seller
        (Organization)

        Represents the registration of information used as proof of identity by
        a seller.
    Document:
      minimum: 0
      required:
        - status
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the document
          format: uuid
          example: 0bdf8080-3ee3-4d07-8a95-774614391e0e
        name:
          maxLength: 90
          type: string
          description: >-
            Original name of the uploaded file. The fileName ends with an
            extension that represents its media format. The extensions match the
            following case-insensitive values pdf, jpeg, jpg, png, tiff.
          example: id_recto_verso_company_registration.pdf
        type:
          type: string
          description: Type of the document.
          example: COMPANY_REGISTRATION
          enum:
            - POLICE_RECORD
            - COMPANY_REGISTRATION
            - TURNOVER
            - BANK_IDENTITY_STATEMENT
            - RESIDENCE_PERMIT
            - PROXY_GRANTING_AN_EMPLOYEE
            - COMPANY_REGISTRATION_OFFICIAL_PAPER
            - OFFICIAL_TAX_CERTIFICATE
            - EMPLOYEE_PAYMENT_NOTICE
            - USER_BANK_STATEMENT
            - BUSINESS_LEGAL_STATUS
            - TAX_STATEMENT
            - EXEMPTION_STATEMENT
            - LIVENESS_RESULT
            - SIREN
            - RBE_LIST_OF_BENEFICIAL_OWNERS
            - PEP_ASSETS_DECLARATION
            - PROFESSIONAL_REVENUE_DECLARATION
            - NON_PROFIT_ORGANISATION_FINANCIAL_DECLARATION
        status:
          type: string
          description: >
            Status represents the lifecycle state of the specific document from
            KYC document collection to KYC assessment:

            - REGISTERED: The document is successfully registered and it is not
            yet verified.

            - PENDING_VALIDATION: KYC assessment of the document is in progress.

            - VALIDATED: The result of the KYC assessment of the document is
            VALIDATED.

            - REFUSED: The result of the KYC assessment of the document is
            REFUSED.
          example: REGISTERED
          enum:
            - REGISTERED
            - PENDING_VALIDATION
            - VALIDATED
            - REFUSED
      description: >
        The Document describes the metadata of a document owned by a seller
        (Organization)

        Represents the registration of information used as proof of identity by
        a seller.
    GETSellerResponse:
      type: object
      required:
        - merchantSellerId
        - solutionCode
        - legalEntityName
        - address
        - documents
        - contacts
        - dataStatus
        - documentListStatus
        - externalRegistrations
        - lastUpdateDateTime
        - onboardingProcessStatus
      properties:
        sellerId:
          type: integer
          description: >
            - Unique and internal technical identifier for the seller.

            - This identifier becomes available only after invoking the
            /_assess-kyc endpoint.
          format: int32
          example: 987456
        solutionCode:
          maxLength: 11
          type: string
          description: >
            - Scalexpert product identifier for marketplace services.

            - The given solutionCode must already be subscribed to by the
            marketplace.

            - solutionCode must match this format ^MP\\w{4}-\\w{4}$

            - Refer to the reference documentation for the marketPlace solution
            codes.
          example: MPFRGE-S1YP
        merchantSellerId:
          maxLength: 55
          type: string
          description: >-
            Unique identifier of the seller as defined by the merchant
            (Marketplace).
          example: 1234-azerty-56789
        legalEntityName:
          maxLength: 40
          type: string
          description: Legal entity name of the seller.
          example: Amazon France
        address:
          $ref: '#/components/schemas/Address'
        email:
          maxLength: 320
          minLength: 6
          type: string
          description: >
            - Email address

            - Email MUST match the format:
            ^((?:[a-z0-9_.+-]){1,64})(@)((?:[a-z0-9.\\-])*(?:[a-z0-9])\\.(?:[a-z0-9]){2,})$
          example: contact@seller.com
        phoneNumber:
          maxLength: 16
          minLength: 3
          type: string
          description: |
            - Phone number with international calling code.
            - It must match the format of the E.164 standard ^\\+[1-9]\\d{1,14}$
          example: '+33666512877'
        legalFormAcronym:
          type: string
          description: The company form of the seller.
          example: SARL
          enum:
            - SARL
            - SA
            - SNC
            - SCA
            - GIE
            - SCS
            - EURL
            - SCP
            - SC
            - ASSOCIATION
            - SOCIETE_DE_DROIT_ETRANGER
            - SAS
            - EARL
        legalEntityCapitalizationAmount:
          type: number
          description: Legal entity capitalization amount in a main unit of the currency.
          format: float
          example: 10000
        legalEntityCapitalizationCurrency:
          maxLength: 3
          type: string
          description: >-
            3 letter currency code as defined by ISO-4217. It must match this
            pattern [A-Z][A-Z][A-Z]
          format: iso-4217
          example: EUR
        businessActivity:
          $ref: '#/components/schemas/BusinessActivity'
        externalRegistrations:
          minimum: 0
          type: array
          description: >-
            External registration list about the seller.

            externalRegistrations will be an empty array if no
            externalRegistration is registered by the seller.
          items:
            $ref: '#/components/schemas/ExternalRegistration'
        legalNumberOfEmployeeRange:
          type: string
          description: Business number of employees range
          example: BETWEEN_1_AND_9
          enum:
            - ZERO
            - BETWEEN_1_AND_9
            - BETWEEN_10_AND_99
            - BETWEEN_100_AND_249
            - MORE_THAN_250
        legalNetIncomeRange:
          type: string
          description: Business annual net income range (in k€)
          example: BETWEEN_0_AND_4
          enum:
            - BETWEEN_0_AND_4
            - BETWEEN_5_AND_9
            - BETWEEN_10_AND_49
            - BETWEEN_50_AND_149
            - BETWEEN_150_AND_499
            - MORE_THAN_500
        legalAnnualTurnover:
          type: string
          description: Business annual turnover (in k€)
          example: BETWEEN_100_AND_249
          enum:
            - BETWEEN_0_AND_39
            - BETWEEN_40_AND_99
            - BETWEEN_100_AND_249
            - BETWEEN_250_AND_999
            - BETWEEN_1000_AND_2999
            - BETWEEN_3000_AND_9999
            - BETWEEN_10000_AND_99999
            - MORE_THAN_100000
        lastUpdateDateTime:
          type: string
          description: >-
            Date of the last update on the seller and its sub-resources. Using
            the ISO 8601 format in UTC YYYY-MM-DDThh:mm:ss.SSSZ
          example: '2024-07-28T22:25:51.000Z'
        bankingInformation:
          $ref: '#/components/schemas/BankingInformation'
        identityVerification:
          $ref: '#/components/schemas/IdentityVerification'
        documents:
          minimum: 0
          type: array
          description: >
            List of the seller documents. Each item contains the document
            metadata and no file content.

            documents will be an empty array, if no document is registered.
          items:
            $ref: '#/components/schemas/Document'
        contacts:
          type: array
          description: >
            List of the seller contacts (physical person).

            contacts will be an empty array, if no contact is registered by the
            seller.'
          items:
            $ref: '#/components/schemas/Contact'
        dataStatus:
          type: string
          description: >
            Evaluation result (completeness or KYC assessment result) of the
            data of the given seller.
             - INCOMPLETE: If any required data is missing to create a seller with COMPLETE status.
             - COMPLETE : ALL required data are available to create a seller.
             - PENDING_VALIDATION: KYC assessment is in progress.
             - VALIDATED: The seller data are successfully validated.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
            - PENDING_VALIDATION
            - VALIDATED
        documentListStatus:
          type: string
          description: >
            Evaluation result (completeness or KYC assessment result) about the
            list of documents concerning the seller

            - COMPLETE: At least a document of type "COMPANY_REGISTRATION" is
            available in the seller's document list and none of the existing
            documents has the status=REFUSED.

            - INCOMPLETE: The document of type 'COMPANY_REGISTRATION' is either
            missing.
                          Or there is one document in the list that has a status of REFUSED.
            - PENDING_VALIDATION: KYC assessment is in progress.

            - VALIDATED: All documents are successfully validated.
          example: COMPLETE
          enum:
            - COMPLETE
            - INCOMPLETE
            - PENDING_VALIDATION
            - VALIDATED
        kycReviewComment:
          maxLength: 255
          type: string
          description: >-
            The kycReviewComment explains why the dataStatus and
            documentListStatus values are not validated after the kyc
            assessment.
          example: 'JDD: Address inconsistent with the information provided'
        onboardingProcessStatus:
          type: string
          description: >
            Defines the lifecycle state of the given seller's onboarding
            process:

            - STARTED: The status of the onboarding process is STARTED when the
            dataStatus or the documentListStatus of the seller or its contacts
            are INCOMPLETE. It represents the default status of the process when
            it was created.

            - TASKS_COMPLETED:
                - The status is reached if the seller's dataStatus and documentListStatus, as well as those of all its contacts are COMPLETE.
                - The status is reached if at least one of the seller's dataStatus or documentListStatus or that of its contacts, is COMPLETE and the others are VALIDATED.
                - At this stage, it is possible to request the KYC assessment.
                - At this stage, it is possible to update the seller and all its associated contacts and documents but it could change the status to STARTED if any data or document is missing.
            - DUE_DILIGENCE_REQUESTED: The status is reached just after
            requesting the KYC assessment ( After calling the POST /_assess-kyc)

            - SELLER_CREATED: The seller and all its associated contacts and
            documents are successfully registered after requesting the KYC
            assessment.

            - KYC_REQUESTED: The KYC verification is requested.

            - TECHNICAL_ERROR: A technical error occurred after receiving a KYC
            assessment, please contact the Scalexpert Support.

            - WAITING_FOR_SELLER_PAYMENT: Waiting for the seller to make a
            payment to the virtual IBAN.

            - KYC_PENDING: KYC verification is in progress.

            - WAITING_FOR_CORRECTION: The KYC verification detects an erroneous
            or missing data, therefore the seller and its contacts needed to be
            updated.

            - SELLER_UPDATED: After fixing the erroneous data and requesting the
            KYC assessment, the seller and all its associated contacts and
            documents are successfully updated.

            - KYC_OK: The KYC verification is OK. This represents the final
            state that could not be changed again.
          example: TASKS_COMPLETED
        sanctionsQuestionnaire:
          $ref: '#/components/schemas/SanctionsQuestionnaireResponse'
      description: >-
        Represents the seller data, the list of documents owned by the seller,
        the list of its related contacts and the evaluation result (completness
        and KYC assessment) of the data and documents.
    IdentityVerification:
      type: object
      properties:
        type:
          type: string
          description: >
            - The type is the way that is used to check the identity

            - It  represents the  discriminator for different types of identity
            verification
          example: VIRTUAL_IBAN
      description: >
        - This part is useful in the context of KYC process for verifying the
        identity of a company

        - There are multiple ways for identity verification.
      discriminator:
        propertyName: type
        mapping:
          VIRTUAL_IBAN: '#/components/schemas/VirtualIban'
      oneOf:
        - $ref: '#/components/schemas/VirtualIban'
    SanctionsQuestionnaireResponse:
      type: object
      properties:
        entityType:
          type: string
          description: >
            Defines the type of the legal entity of the seller:

            - REPORTING_FINANCIAL_INSTITUTION: Reporting financial institution

            - NON_REPORTING_FINANCIAL_INSTITUTION: Non-reporting financial
            institution

            - ACTIVE_NON_FINANCIAL_PUBLIC_INSTITUTION: Active non-financial
            Entity - governmental entities, Int. organizations

            - ACTIVE_NON_FINANCIAL_OTHER_INSTITUTION: Active non-financial
            entity - other

            - PASSIVE_NON_FINANCIAL_INSTITUTION: Passive non-financial entity -
            investment entity that is not participating jurisdiction FI
          example: REPORTING_FINANCIAL_INSTITUTION
          enum:
            - REPORTING_FINANCIAL_INSTITUTION
            - NON_REPORTING_FINANCIAL_INSTITUTION
            - ACTIVE_NON_FINANCIAL_PUBLIC_INSTITUTION
            - ACTIVE_NON_FINANCIAL_OTHER_INSTITUTION
            - PASSIVE_NON_FINANCIAL_INSTITUTION
        activityOutsideEuScope:
          type: string
          description: >
            The seller's entity and its business units, subsidiaries, and joint
            ventures have a commercial activity out side the European Union:

            - ONLY_THE_LEGAL_ENTITY: Only the legal entity

            - LEGAL_ENTITY_AND_100_PERCENT_HELD_SUBSIDIARIES: The legal entity
            and all its subsidiaries held at 100%

            - LEGAL_ENTITY_AND_MORE_THAN_50_PERCENT_HELD_SUBSIDIARIES: The legal
            entity and all its subsidiaries held at 50% or more

            - LEGAL_ENTITY_AND_LIST_OF_SUBSIDIARIES: The legal entity and a list
            of subsidiaries
          example: ONLY_THE_LEGAL_ENTITY
          enum:
            - ONLY_THE_LEGAL_ENTITY
            - LEGAL_ENTITY_AND_100_PERCENT_HELD_SUBSIDIARIES
            - LEGAL_ENTITY_AND_MORE_THAN_50_PERCENT_HELD_SUBSIDIARIES
            - LEGAL_ENTITY_AND_LIST_OF_SUBSIDIARIES
        isActiveOutsideEu:
          type: boolean
          description: >-
            - The entity and its business units, subsidiaries, and joint
            ventures have a commercial activity out side the European Union.

            - If set to true, then the following attributes
            (isSubjectToSanctions, isLocatedInSanctionedCountry,
            isEngagedWithSanctionedParty) will be required and it must be filled
            with the correct value
          example: true
        isSubjectToSanctions:
          type: boolean
          description: >
            - The entity, its subsidiaries, entities, employees, directors,
            beneficial owners, or joint ventures are subject to Economic
            Sanctions

            - When the field is optional and not filled, the default value is
            false.
          example: true
        isLocatedInSanctionedCountry:
          type: boolean
          description: >
            - The entity, its subsidiaries, or joint ventures, located within or
            operating from any countries or territories are subject to
            Comprehensive Sanctions.

            - When the field is optional and not filled, the default value is
            false.
          example: true
        isEngagedWithSanctionedParty:
          type: boolean
          description: >
            - The entity, its subsidiaries, or joint ventures, are engaged in
            transactions, investments, business, or other dealings that directly
            or indirectly involve or benefit.

            - When the field is optional and not filled, the default value is
            false.
          example: true
      description: >-
        Information that must be provided to verify whether the seller's entity
        is related to sanctioned matters
    VirtualIban:
      type: object
      properties:
        type:
          type: string
          description: >
            - The type is the way that is used to check the identity

            - It  represents the  discriminator for different types of identity
            verification
          example: VIRTUAL_IBAN
        iban:
          maxLength: 34
          type: string
          description: >
            - The International Bank Account Number is a code used
            internationally by financial institutions to uniquely identify the
            account of a customer at a financial institution.

            - It MUST match the ISO 13616 format:
            [A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}
          example: FR1420041010050500013M02606
        bic:
          maxLength: 11
          type: string
          description: >-
            Business Identifier Code. Code allocated to a financial or
            non-financial institution by the ISO 9362 Registration Authority.
          example: SOGEFRPPXX
      description: >-
        The seller is required to make

        a transfer to the virtual IBAN for KYC verification.

        The virtualIban's value should be filled after the
        MP_IBAN_AVAILABLE_FOR_PAYMENT notification is received by the
        MarketPlace.
    PayoutMerchantsResponse:
      required:
        - pageCount
        - payoutMerchants
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of page
          format: int32
          example: 1
        payoutMerchants:
          type: array
          description: List of payoutMerchants
          items:
            $ref: '#/components/schemas/PayoutMerchantResponse'
    OrdersResponse:
      required:
        - orders
        - pageCount
      type: object
      properties:
        pageCount:
          type: integer
          description: Total number of pages
          format: int32
          example: 1
        orders:
          type: array
          description: List of orders
          items:
            $ref: '#/components/schemas/OrderResponse'
  securitySchemes:
    oauth-flows:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: >-
            https://api.scalexpert.uatc.societegenerale.com/baas/uatc/auth-server/api/v1/oauth2/token
          scopes:
            'marketplace:rw': marketplace scope
externalDocs:
  description: Dev Docs
  url: >-
    https://docs.scalexpert.societegenerale.com/apidocs/3mLlrPx3sPtekcQvEEUg/developers-docs/get-started
security:
  - oauth-flows:
      - 'marketplace:rw'
x-sg-configuration:
  gateways:
    - name: baas-open-gateway
      description: To expose Open APIs to BAAS partners
      url: 'https://api.scalexpert.uatc.societegenerale.com/baas/uatc'
